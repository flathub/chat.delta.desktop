{
 "_id": "memoize-one",
 "_rev": "46-6c9bd04aa0b0d87df99c23beee1e33d5",
 "name": "memoize-one",
 "description": "A memoization library which only remembers the latest invocation",
 "dist-tags": {
  "latest": "6.0.0",
  "beta": "6.0.0-beta.1"
 },
 "versions": {
  "0.0.1-beta": {
   "name": "memoize-one",
   "version": "0.0.1-beta",
   "description": "A memoization library for memoizing a function with a cache size of one",
   "main": "lib/index.js",
   "module": "src/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "gitHead": "7636233d7043dc8ac8a64278b4fe84c7e36810cf",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@0.0.1-beta",
   "_shasum": "b4e8797623da88d8ae76bad3a8b5a7954b50b80a",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "b4e8797623da88d8ae76bad3a8b5a7954b50b80a",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-0.0.1-beta.tgz",
    "integrity": "sha512-Nu594VqNc2j6S6pec5RPrM9OO+n1X/JYDta010LSW46sOxZT8P8lA7rGSoLVEY0dsYgMx25oPPAva+2xpAEk7Q==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQD1eZttNpS6qa1933A2X0HwBh73TResZJTeTX65wTVUKgIgD/hhc+Edg4Yn+D4ODZh03/TbTYboLJRsXjYmWZ0/HPo="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/memoize-one-0.0.1-beta.tgz_1486367917302_0.9043313993606716"
   },
   "directories": {}
  },
  "0.0.2-beta": {
   "name": "memoize-one",
   "version": "0.0.2-beta",
   "description": "A memoization library for memoizing a function with a cache size of one",
   "main": "lib/index.js",
   "module": "src/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "nyc": "10.1.2",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "gitHead": "f58964a60d3ae55e31d873d1adfb3406763706f9",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@0.0.2-beta",
   "_shasum": "0874a534ea2b1c335851ef55c8a373df908e2f00",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "0874a534ea2b1c335851ef55c8a373df908e2f00",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-0.0.2-beta.tgz",
    "integrity": "sha512-KdlPJNvfaxj5YPJCVzNLXti+aqrXgbZRn+fFbFHMNsnIMkgcQS5U4cZlO8Ejt+r4iAX2DFPuv0O5vf7brqB3nA==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCICSmQ/9WuM01tqa86XPbEqUNdAIu2c1i3my3rhw7iYfIAiBdRZlAftCB+W2afreu572v5HDbVnW9EhScOcMv7i1d4w=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/memoize-one-0.0.2-beta.tgz_1486371097446_0.9224576589185745"
   },
   "directories": {}
  },
  "1.0.0-rc.1": {
   "name": "memoize-one",
   "version": "1.0.0-rc.1",
   "description": "A memoization library for memoizing a function with a cache size of one",
   "main": "lib/index.js",
   "module": "src/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "nyc": "10.1.2",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "gitHead": "d14a1f4e738b46fa88162ac65e6f1879e80a4335",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@1.0.0-rc.1",
   "_shasum": "7e9a0b403aed1937fbf8fc94442e1bede25f88dc",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "7e9a0b403aed1937fbf8fc94442e1bede25f88dc",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-1.0.0-rc.1.tgz",
    "integrity": "sha512-AwnT9Pb3BVBcQCoUgryni5EaJpwZVOIh+tOLbXq2MYMvgzsn4c+SBfzIAxwsdWPAvg2WaCSJ/5W8LtxTxZo6LA==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIGG2NIU0/XEcKnamxD7f6UQZdTM+35Velt6KpjTyzELPAiBj9QYW7yuaJwTvdR+1kA/dd6DgKSJQXyZZsJfEHjcCAQ=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/memoize-one-1.0.0-rc.1.tgz_1486420359635_0.08447556383907795"
   },
   "directories": {}
  },
  "1.0.0": {
   "name": "memoize-one",
   "version": "1.0.0",
   "description": "A memoization library which only remembers the latest invokation",
   "main": "lib/index.js",
   "module": "src/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "nyc": "10.1.2",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "1b1b7769e1aee57a6dd63b7651b5dcdc3fec94df",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@1.0.0",
   "_shasum": "0308fce7de5b867d268fef55a1da4826b782a18e",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "0308fce7de5b867d268fef55a1da4826b782a18e",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-1.0.0.tgz",
    "integrity": "sha512-PuYqArKyKalHJF2TcZvXZD766jADwhO4jtzpEwJzp8AOmHrKH7Vo82+VFIxKNFfal/d5RoCG9Dby+ibBoANbZw==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIGKV2rwMyGKSsCAcAknhKNaEn46kKz2cJtqhEUZfEpGPAiEAtmL1Mq+iI8yslENhHAUc2ojphCiy/SEwZ8ENFcSpAVU="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/memoize-one-1.0.0.tgz_1486591364250_0.5564714095089585"
   },
   "directories": {}
  },
  "1.0.1": {
   "name": "memoize-one",
   "version": "1.0.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "module": "src/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "nyc": "10.1.2",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "86732690398f071c059f8e72986e45eb01eab721",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@1.0.1",
   "_shasum": "528fbf37deb20bde18f6d17eac1d172770b64cc0",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "528fbf37deb20bde18f6d17eac1d172770b64cc0",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-1.0.1.tgz",
    "integrity": "sha512-r1x8HOtTpqy8liCWE+vUpJiTLhU3LR+JhOv+8kXt6s8hPSzdib4sweRsp45C2LMwdsuiU9MHp3JIuCVOahWZaw==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIFeZt7YkrXu9vBQMcczgPhUpDnZT/mZyimsUJL6M5QOGAiAFPzaTFW0ymziVMhZR0ZJefmy77vMxFCl5pIZefbLJhQ=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/memoize-one-1.0.1.tgz_1486686790862_0.5217675589956343"
   },
   "directories": {}
  },
  "1.0.2": {
   "name": "memoize-one",
   "version": "1.0.2",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "module": "src/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "nyc": "10.1.2",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "237fa34bfc22f3ef35ac4357c7f31b455d06887e",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@1.0.2",
   "_shasum": "b91bb769d98debdeae1a33b981904d75c5d309f0",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "b91bb769d98debdeae1a33b981904d75c5d309f0",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-1.0.2.tgz",
    "integrity": "sha512-sqSNTl/GCCCxEOF8AFVIOZkjNJLxFNUuBwNDYbOLWz+XLKrZt7R2Qi0bChqw28GI1NFHE/QKjhqzEDZR8mstWw==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEYCIQDQOEaNKFURr06azylb6e42r96zzMdc2F4CKXRui+7A2wIhAO4CpjvXoDHCNTWGCuF0mmVxgUrjs7wp9RbuFCwdteNl"
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/memoize-one-1.0.2.tgz_1487031705498_0.8509123160038143"
   },
   "directories": {}
  },
  "2.0.0": {
   "name": "memoize-one",
   "version": "2.0.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.22.2",
    "babel-core": "6.22.1",
    "babel-eslint": "7.1.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-preset-es2015": "6.22.0",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "3.15.0",
    "eslint-plugin-flowtype": "2.30.0",
    "flow-bin": "0.38.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.2.0",
    "nyc": "10.1.2",
    "rimraf": "2.5.4",
    "sinon": "1.17.7"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "6b33404ba31c5de54ac30f810398255a4439d76b",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@2.0.0",
   "_shasum": "1cb00157be79da65fbb1405ab746c1b1ec290787",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "1cb00157be79da65fbb1405ab746c1b1ec290787",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-2.0.0.tgz",
    "integrity": "sha512-ejxzWthMn8zP9hdExn/NjGJhIoxtJ+17199JtuofpCMoGrx+EumR8R3Q+qUhJRZqI/whAOQpqoM19gX1M7Cenw==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIF3VyW2KwVrqWQQDGL1G9fMzbrCER79/Q2Css4TTNpq1AiEA8gjxjhOfDzBDJI11G2ZVJWCq1yTgmtpTDNY6t0Jgn3s="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/memoize-one-2.0.0.tgz_1493964782817_0.7283691600896418"
   },
   "directories": {}
  },
  "2.0.1": {
   "name": "memoize-one",
   "version": "2.0.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.24.1",
    "babel-core": "6.24.1",
    "babel-eslint": "7.2.3",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.23.0",
    "babel-preset-es2015": "6.24.1",
    "chai": "3.5.0",
    "codecov": "2.1.0",
    "eslint": "3.19.0",
    "eslint-plugin-flowtype": "2.32.1",
    "flow-bin": "0.45.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.3.0",
    "nyc": "10.3.0",
    "rimraf": "2.6.1",
    "sinon": "2.2.0"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "5cb7ffcc168e2141c820d17b50000cbc5aafddbd",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@2.0.1",
   "_shasum": "c3f1adeaafb073f432affc99782fb327f7200322",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "c3f1adeaafb073f432affc99782fb327f7200322",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-2.0.1.tgz",
    "integrity": "sha512-BhOOcCZXv34TOLNKqR/jS0m89y38VywNLQ5LLFDIR9N9QcT76rNb95lsM2zLaAPtMhqy80sS4bPrhBg/KJeElw==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIHaf2DzSND3d1/P/gDmrSQLndTM5NyEsisv6tueqK5uEAiBC6tIhNxNeisAPjFkzTFBUl8DnmoILaGDDfuvc9JZUzA=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/memoize-one-2.0.1.tgz_1493995998198_0.442872951971367"
   },
   "directories": {}
  },
  "3.0.0": {
   "name": "memoize-one",
   "version": "3.0.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.24.1",
    "babel-core": "6.24.1",
    "babel-eslint": "7.2.3",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.23.0",
    "babel-preset-es2015": "6.24.1",
    "chai": "3.5.0",
    "codecov": "2.1.0",
    "eslint": "3.19.0",
    "eslint-plugin-flowtype": "2.32.1",
    "flow-bin": "0.46.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.3.0",
    "nyc": "10.3.0",
    "rimraf": "2.6.1",
    "sinon": "2.2.0"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "b46dc8ee603046cafc123438cd1fa76dd7cb97d0",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@3.0.0",
   "_shasum": "0519584c64c8f28000030b46b2e3ad4af587e914",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "0519584c64c8f28000030b46b2e3ad4af587e914",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-3.0.0.tgz",
    "integrity": "sha512-O8rTlUFN8EKdZMsUvgyZm1uw5qZHL2xIlmJ5rimsmDD3YUK5B8PGU/IRHlX2Zr4Kxff0ijj+SP8EIblRwCRZBA==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQDQ0dNK7tvrRJGOUzrThaboVNyOv1V/a+7QtjOILSB08QIgYgwYC7Xkwe7gK6t3RmyZVqbAIbXIHkbMJPu2Z1IuPVg="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/memoize-one-3.0.0.tgz_1494832182423_0.6639867690391839"
   },
   "directories": {}
  },
  "3.0.1": {
   "name": "memoize-one",
   "version": "3.0.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.24.1",
    "babel-core": "6.24.1",
    "babel-eslint": "7.2.3",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.23.0",
    "babel-preset-es2015": "6.24.1",
    "chai": "3.5.0",
    "codecov": "2.1.0",
    "eslint": "3.19.0",
    "eslint-plugin-flowtype": "2.32.1",
    "flow-bin": "0.46.0",
    "flow-copy-source": "1.1.0",
    "mocha": "3.3.0",
    "nyc": "10.3.0",
    "rimraf": "2.6.1",
    "sinon": "2.2.0"
   },
   "scripts": {
    "test": "yarn run lint && yarn run typecheck && yarn run test:fast",
    "test:fast": "mocha test --compilers js:babel-core/register --globals global",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:flow",
    "build:clean": "rimraf lib",
    "build:lib": "babel src --out-dir lib",
    "build:flow": "flow-copy-source --verbose src lib",
    "coverage": "yarn run coverage:analyise && yarn run coverage:report && yarn run coverage:publish",
    "coverage:analyise": "nyc --check-coverage --statements 100 --branches 100 --functions 100 --lines 100 yarn run test:fast",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:publish": "codecov",
    "prepublish": "yarn run build"
   },
   "keywords": [
    "memoize",
    "cache",
    "performance"
   ],
   "gitHead": "99601be7754c04216e70f6784533f195ac74e0da",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@3.0.1",
   "_shasum": "7b599850bb41be8beed305f4eefd963c8cea9a0a",
   "_from": ".",
   "_npmVersion": "3.10.10",
   "_nodeVersion": "6.9.4",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "shasum": "7b599850bb41be8beed305f4eefd963c8cea9a0a",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-3.0.1.tgz",
    "integrity": "sha512-wOe9z0Uyaw1HTWC00+OR35KSjg+RZer4cxToq1CcnT5GxbpqfnjkPdAex9xJe3fQw86k/76R1JoGwA84LfWtPw==",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQCzYdhFf/s/cKGL1uCpFMjfZUJ0pwtJys6XimjF6bZ85AIgZbopTUu6VPsPRUdpZHbXimX15tYN9BEsTY9D13bwMWU="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one-3.0.1.tgz_1495879418749_0.07076057023368776"
   },
   "directories": {}
  },
  "3.1.0": {
   "name": "memoize-one",
   "version": "3.1.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "module": "esm/index.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "files": [
    "/lib",
    "/esm",
    "/src"
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.26.0",
    "babel-core": "6.26.0",
    "babel-eslint": "8.2.2",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-flow": "^6.23.0",
    "chai": "4.1.2",
    "cross-env": "^5.1.4",
    "eslint": "4.19.0",
    "eslint-plugin-flowtype": "^2.46.1",
    "eslint-plugin-jest": "^21.15.0",
    "flow-bin": "0.68.0",
    "flow-copy-source": "1.3.0",
    "jest": "^22.4.2",
    "rimraf": "2.6.2"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:esm && yarn run build:flow",
    "build:clean": "rimraf lib esm",
    "build:lib": "cross-env NODE_ENV=cjs babel src -d lib",
    "build:esm": "babel src --out-dir esm",
    "build:flow": "flow-copy-source --verbose src lib && flow-copy-source --verbose src esm",
    "prepublish": "yarn run build"
   },
   "gitHead": "bd1edab004de85c5e4213409bb30010617c0729a",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@3.1.0",
   "_npmVersion": "5.5.1",
   "_nodeVersion": "8.4.0",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-rpzyrDdq3TMd7PuwzUQ7IsWvIKjQs/YHMnnrsX7MyPUhmr5x3gsykwiNsW7SX/VgtltmQtujGeKQntxoRz40DA==",
    "shasum": "08c77942b642e6a99d3b984ddc87408080a3918e",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-3.1.0.tgz",
    "fileCount": 8,
    "unpackedSize": 18680,
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIEuaOuw5fWgvlXkeAW0aH3mmp+zRO1Udsm89CH2q4BDpAiEApkKFWdTIoQQyZtop23S849fCF9qEGrus54hTsmMK9rg="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_3.1.0_1521677144939_0.019997431701371582"
   },
   "_hasShrinkwrap": false,
   "deprecated": "critical bug on ie11. please use 3.1.1"
  },
  "3.1.1": {
   "name": "memoize-one",
   "version": "3.1.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "lib/index.js",
   "module": "esm/index.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "files": [
    "/lib",
    "/esm",
    "/src"
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.26.0",
    "babel-core": "6.26.0",
    "babel-eslint": "8.2.2",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-flow": "^6.23.0",
    "chai": "4.1.2",
    "cross-env": "^5.1.4",
    "eslint": "4.19.0",
    "eslint-plugin-flowtype": "^2.46.1",
    "eslint-plugin-jest": "^21.15.0",
    "flow-bin": "0.68.0",
    "flow-copy-source": "1.3.0",
    "jest": "^22.4.2",
    "rimraf": "2.6.2"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test -",
    "lint:fix": "yarn run lint --fix",
    "build": "yarn run build:clean && yarn run build:lib && yarn run build:esm && yarn run build:flow",
    "build:clean": "rimraf lib esm",
    "build:lib": "cross-env NODE_ENV=cjs babel src -d lib",
    "build:esm": "babel src --out-dir esm",
    "build:flow": "flow-copy-source --verbose src lib && flow-copy-source --verbose src esm",
    "prepublish": "yarn run build"
   },
   "gitHead": "5b4a3ecc4913e5e6bf4b4da2776f3764ecbd80ba",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@3.1.1",
   "_npmVersion": "5.5.1",
   "_nodeVersion": "8.4.0",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-YqVh744GsMlZu6xkhGslPSqSurOv6P+kLN2J3ysBZfagLcL5FdRK/0UpgLoL8hwjjEvvAVkjJZyFP+1T6p1vgA==",
    "shasum": "ef609811e3bc28970eac2884eece64d167830d17",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-3.1.1.tgz",
    "fileCount": 8,
    "unpackedSize": 15252,
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEYCIQC1xjF6UkBe0/59Z1qkY0rIaxuxD5GDyxx1PWC+2mmDYgIhANu2snMT9zLxZSyxgoPuQ4e3pBzwfxBqKFO4Of3bGqVQ"
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_3.1.1_1521706223561_0.526611674639234"
   },
   "_hasShrinkwrap": false
  },
  "4.0.0": {
   "name": "memoize-one",
   "version": "4.0.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "files": [
    "/dist",
    "/src"
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "babel-cli": "6.26.0",
    "babel-core": "6.26.3",
    "babel-eslint": "8.2.5",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.26.0",
    "babel-preset-env": "^1.7.0",
    "babel-preset-flow": "^6.23.0",
    "chai": "4.1.2",
    "cross-env": "^5.2.0",
    "eslint": "5.0.1",
    "eslint-plugin-flowtype": "^2.49.3",
    "eslint-plugin-jest": "^21.17.0",
    "flow-bin": "0.75.0",
    "jest": "^23.2.0",
    "rimraf": "2.6.2",
    "rollup": "^0.62.0",
    "rollup-plugin-babel": "^3.0.5",
    "rollup-plugin-commonjs": "^9.1.3",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^4.0.0"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "3fe7a61c028d8dbfd2282b88229f15c19e6ed409",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@4.0.0",
   "_npmVersion": "5.6.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-wdpOJ4XBejprGn/xhd1i2XR8Dv1A25FJeIvR7syQhQlz9eXsv+06llcvcmBxlWVGv4C73QBsWA8kxvZozzNwiQ==",
    "shasum": "fc5e2f1427a216676a62ec652cf7398cfad123db",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-4.0.0.tgz",
    "fileCount": 9,
    "unpackedSize": 14197,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbNazCCRA9TVsSAnZWagAAwrsQAJcCAyvtxKIQ2uETqIx6\n5CcdCy8SzwjvnwyKYHc/b3nDM+rSnFK6nonDYAPJCY+dY9XdyWO7sHsTPu1t\n5xZjrUtkMq7cJyrO7lJd6dIAu0l5sCCYt/K26DSSBgqAZH7I9UZNdkhoWKpP\nvKSJndka7GQpJJ69tNeYPdL3x+B5/aYOxQ5Yt9axMtNr291RG9DwiSHngMTy\nYBZzD7qMhPR46kNmQ26aJjeLX0p/h8JQpnchDU2FF3T1XTlu4oPSvRY5R3vI\nKxGfcepgyEvGDPu2Qa25NGKYZUvRkqiPlVsA7mrl8RLXDeeiDhRlzYX1Hk1Q\nErYbNAXmQfPEV7ZMJd+3XBa714WYhb4fkuk81IN1kMuSKXRKmgoNQimwVo3X\nvYaF61MytdSRXrVQV5Y0KI/bJWIOCrWXTZ/S2fby5a6C0CP6P3QCsg0KRuSS\ntRKrIgFZTuA+0gFkB/P7/Cg0IMNFmReEn9DB5WJJbvMrmQm67Q9xijDKdOhH\nI+TEnRIK8aqIICpDtRGD29fRR+MM7xsJiNpeK1FyPZwZJXWHYykedUR/oXJa\nmL0CQ0ksNhgIUTqWGm1OeXx3wcMhVXUM7wfjpNKMWm75ABbTTpxLG4jPU5O0\nAcSGjqCl57q6Sfohf7xdu5o0RtPi5WPnOnwtW5xIP5UNEWsoXh9mD6qYh5yR\nkAtK\r\n=1a7P\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIGG39oPGHdPdEwZ+wlwlLpiUw95or3Br+Zune9aQCKK8AiEAsh2U6i1UmH3I9L0SOTiZ+VFy2KOQic2p/qHBrtWf7EI="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_4.0.0_1530244289954_0.7810159951816047"
   },
   "_hasShrinkwrap": false
  },
  "4.0.1": {
   "name": "memoize-one",
   "version": "4.0.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "9.0.0",
    "babel-jest": "^23.4.2",
    "chai": "4.1.2",
    "cross-env": "^5.2.0",
    "eslint": "5.4.0",
    "eslint-plugin-flowtype": "^2.50.0",
    "eslint-plugin-jest": "^21.22.0",
    "flow-bin": "0.79.1",
    "jest": "^23.5.0",
    "rimraf": "2.6.2",
    "rollup": "^0.65.0",
    "rollup-plugin-babel": "^4.0.2",
    "rollup-plugin-commonjs": "^9.1.6",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^4.0.0"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "a71302104827951626d815577c32f315f896f857",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@4.0.1",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-EQ0hvTFVoBoPS8wo1UW6ORPURVMZnb2eWzfxSkIE6W+Auq4XY2P/2zesh+55+1aeX77Vt+48OOLNsCCrtU8hJg==",
    "shasum": "fdcc01bc764c50bb6f8a4e54d97f7e790b7bb42a",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-4.0.1.tgz",
    "fileCount": 9,
    "unpackedSize": 16728,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbiJ0BCRA9TVsSAnZWagAAAJMP/0hAMpmTA0rq2SeeKimo\nVQ1yZZ0VvoceUuL5QyCNhXWLce0AxWW06Fx9FQJOwAfxcsqfpimUxWEMrMgL\nENxT5okzu6seJG3sWtEv5PtwArUc04FSnlxNnvM8FXsGJrIhvnvStPYwQJXC\nt2FIGWgRLeKNoCsMiU/yvR7QhUPJFYOSI19HXkCpAeuX9Wy6uQqQt5sN1Sru\nie3Gq0l4RkwpgysKCcFwDmSeAgEPu7PBPZvNE8tBvQrjXmaYAohPD6heDkN3\nEsH34bDMMCT66vo53lxpmWaXt8E8Y69ZHpkmLORwZ5aPajdBbtyiDN2KjMCI\nM6ZDTHCuEpHQYAdvpfot576SBlqFiuVKe0ja95rtqBMG58W/yfbWW8fxWQlj\nUcn2pVFuY4C41nPatZAAyFdKVM4Z4KzPis9vldn0Fa21eM2QTMGYdmtXVsCd\n36svrAJ3yoC5AeAxcFss5O8EYruP7EAQpAIixZqM26bILJr479d4UA2hztrP\ndAnfUTNAZn5mpDF7y3VANBzZDCmACfkgh0FyuUVuzBsUu0LI9A353pZIsupJ\nUBLtiCdsBbWxxsKC95yjbgMynkJZy6L4EXVcQABFNBc9m485Wi+qle2l8YM2\nCMmVxm1Wt2K7Pxil4TOPuBw2JQkKQiJ2dCijQ2bOLpmvlZ/IhbxRnnCwPEnx\ncBvZ\r\n=Uze8\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEYCIQDFSVLZk+13DW/aN1sOLiRipGK7fPreIe35H+uworRHtAIhAL9AA9OcrX3QaWPxd2SzgwHvzV8FjMEOPOoWiqgvjZ10"
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_4.0.1_1535679744534_0.24234818254767543"
   },
   "_hasShrinkwrap": false
  },
  "4.0.2": {
   "name": "memoize-one",
   "version": "4.0.2",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "9.0.0",
    "babel-jest": "^23.4.2",
    "chai": "4.1.2",
    "cross-env": "^5.2.0",
    "eslint": "5.4.0",
    "eslint-plugin-flowtype": "^2.50.0",
    "eslint-plugin-jest": "^21.22.0",
    "flow-bin": "0.79.1",
    "jest": "^23.5.0",
    "rimraf": "2.6.2",
    "rollup": "^0.65.0",
    "rollup-plugin-babel": "^4.0.2",
    "rollup-plugin-commonjs": "^9.1.6",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^4.0.0"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "47fe762e2bf3d571f8e9d9d9ea1ca9b390dd9d1b",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@4.0.2",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-ucx2DmXTeZTsS4GPPUZCbULAN7kdPT1G+H49Y34JjbQ5ESc6OGhVxKvb1iKhr9v19ZB9OtnHwNnhUnNR/7Wteg==",
    "shasum": "3fb8db695aa14ab9c0f1644e1585a8806adc1aee",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-4.0.2.tgz",
    "fileCount": 9,
    "unpackedSize": 16736,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbiOJyCRA9TVsSAnZWagAAdyQP/1z9xK4ZJv8+fsk3oZy0\nCV03dl3SGSF3WuUWTwFUnfkR/2KfWhbaOj88zS7K+Imrmz7F/qu6USr0muze\nHtD0m+IjaKgNhi4cfLoWisbHLJ72LQdUgyXx1GjhP4zI8uEb007/i5iG7+e0\nzl+CZuZQPfTPs793lNfTQan9doKJjzlfS2TENdP/EOOWZ8yzDdKit/dItNS6\nO+2Gx5kr5jp5FQQRXeenp1sbdCLrz5Xn//+6CyNRpEzAa+IFsJltuH59j9gj\n4SYByFtABbxUVDUrS3grVbFuC3pevpGSyuCc3W4kh3SeZXfIw3M39oth2PQK\nEuw4iopKtfOhG12chYqp02q1lG42ppyPHVaOblKhvrsimMr8ZvYIKSH9XGYV\nd8uRAq7bO0p+ZPOJHvILayswG9T35rkXN2iiFcfToH/K6hBU3XtPInt7cCgY\nLfxKUn5fJwhyEowgvFwFU1fhTpHr+Qo0Xb8Dyb+uMQDLV7JgO4lT/DpwaLkQ\nUs6a+gr4Ldi2cR7wprqlSRTAU9t2eUb/G3qxAumHHFk9OefCPrQLKcQRkQbB\njk/9Boi4YyrXR4R2oxChAhug35ta2YDkF67n/AUG3rbBy6eAq8dwlM3qrE6T\nnlMpCo4QYvlLym9X0gpRyTWYnOHLchmL7O0BpehsfDCDK76d54TmzsibEdMs\nD3u1\r\n=TYQq\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQD/nLz7+0FabhwTZncP6XMoAVi9ScjiHv8RXxAuHBxnJQIgColyNq5dICnrHYlEE5nPk3iaJBUcpbZvSj0euL0FCs4="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_4.0.2_1535697521617_0.5097505120339458"
   },
   "_hasShrinkwrap": false
  },
  "4.0.3": {
   "name": "memoize-one",
   "version": "4.0.3",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.1.5",
    "@babel/preset-env": "^7.1.5",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^23.6.0",
    "cross-env": "^5.2.0",
    "eslint": "5.8.0",
    "eslint-plugin-flowtype": "^3.2.0",
    "eslint-plugin-jest": "^21.27.2",
    "flow-bin": "0.85.0",
    "jest": "^23.6.0",
    "rimraf": "2.6.2",
    "rollup": "^0.67.0",
    "rollup-plugin-babel": "^4.0.3",
    "rollup-plugin-commonjs": "^9.1.6",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^6.0.0"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "8ae12150f9b77cd1022d3ff16e74675f981ee709",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@4.0.3",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-QmpUu4KqDmX0plH4u+tf0riMc1KHE1+lw95cMrLlXQAFOx/xnBtwhZ52XJxd9X2O6kwKBqX32kmhbhlobD0cuw==",
    "shasum": "cdfdd942853f1a1b4c71c5336b8c49da0bf0273c",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-4.0.3.tgz",
    "fileCount": 9,
    "unpackedSize": 16715,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb4kqqCRA9TVsSAnZWagAAqbcP/1BxUXGIKms4gJz94/6P\nVdm2aj//KNHuVA5cixovTxxllKem3sw/DXbLo5MsDTvLa03UhfyuntgAcOnl\n4Xe06WBNIE4jzsUvL97xu9pqkpRtU/4w83hJX0WW9ClwwbysVA8An1KN5z3J\nmK4K1et8Pq1n6OhuWypWZLFryKvRbrv6KpqRzkon++1DErMONZ93pupU2X92\nxPYjG3vX4zDYK7DVIZTvH5FlOI8UuGWPRSdp9N2p5UODB101G4Yw8NPLOEX6\nQuDuAweHrjoJURx39iyHcR6mPIGRwzzvrA35eASJhQM6cJigM+b1ijiOUpBd\npSTc4v1aDKb5xIuVLbIlCps7s4fusbTg8ZcMtonyZYQS6Y9kC5zDFejH1XoZ\ndY6Z0ctn3+gtldqXYVhYvkPovye3Puq5b9GVI3borCjilEjoGah+NiawfnLK\nfoqSz2tutFd5aaANl4PrPQvcC/jSmk8MgwyH8sfgOClFo3Bv+2VmPDuGcjIo\nCxwJfZTg1skHswPOwQUhZRjBrA+y3T+qBt8P7dJ72qGI4fJ6B62y22QMfvl/\nluP6ZKJYInmdEnoA7bOGBXpZVlLbEelcAylR4c6v790OrkvvVAdU5SF57UBS\nDJjyCWsKmPPc/bsVkfiudeNC6zUsRrQEt29zCQEGF9vdEzxoS5Rqo4kGWA1H\nzu14\r\n=q0Om\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIF1Qc2p/JKTPxvtg8cVdSru5NqRxDgG/RweEcW9wYjV8AiEAzp35oN/lVgEYY+jPuxgYKQUnMC5FzRlbJ2Jzugz3mE0="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_4.0.3_1541556905883_0.27120733316890955"
   },
   "_hasShrinkwrap": false
  },
  "4.1.0": {
   "name": "memoize-one",
   "version": "4.1.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.2.0",
    "@babel/preset-env": "^7.2.0",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^23.6.0",
    "cross-env": "^5.2.0",
    "eslint": "5.10.0",
    "eslint-plugin-flowtype": "^3.2.0",
    "eslint-plugin-jest": "^22.1.2",
    "flow-bin": "0.88.0",
    "jest": "^23.6.0",
    "rimraf": "2.6.2",
    "rollup": "^0.67.4",
    "rollup-plugin-babel": "^4.0.3",
    "rollup-plugin-commonjs": "^9.2.0",
    "rollup-plugin-replace": "^2.1.0",
    "rollup-plugin-uglify": "^6.0.0"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "lint": "eslint src test",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "5d9d0335bbdbda42b4fe820fb4081bfd318f158d",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@4.1.0",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-2GApq0yI/b22J2j9rhbrAlsHb0Qcz+7yWxeLG8h+95sl1XPUgeLimQSOdur4Vw7cUhrBHwaUZxWFZueojqNRzA==",
    "shasum": "a2387c58c03fff27ca390c31b764a79addf3f906",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-4.1.0.tgz",
    "fileCount": 9,
    "unpackedSize": 17719,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcEEYpCRA9TVsSAnZWagAA0HgP/ivSHaaO6DldFwBar/sz\n/7ayrUIMpeajQHZoQLJtMYSWUcvKtyTCKR4vnpHoyyFyJGx9cBQGpd1ZRk/d\no5wHZqX1I3XNiXpujtQBQL38JQtzON8jXln4Ww/AVfNDu9SgrkME07yVrv8W\nU7qdZGJNPoi/STgGFvCGY3qK9QyHJfPsw8AV0bRvlSlfNBpgl0wF256XczwG\nCs6gYx/Z08Xto8I8F4UsjPDwS5TfredrVpwL/dDih2Ll7VbqdjDSdw/Rzq+E\nGvCOUgn8dywNZ935wTPAB+KklzxIE1fX/GFMAGjww6GXbQAxQ6ScdhV3dTvs\nCQayhlYzkTXv3Y4wl2L2NgBWJku1rd8siPzDIqTnOpRksXqpa/6+YeE1UuHx\nWLvjLM/yxzkKdiXIsmBPWY/KFLM547IaCCOuZI7pvrTBl/U9X9YFVGwV+L6h\nvxLkA1oeI0/pKPRxw1XmS7kOrmzskhBQpfZZraLdWpbbyZFjHEmbAnKpbjXp\nYpIRMytF892kW/+zkAMtZy/yaAcl5aU5lslOX0NFdpc3eXLW45EBTFf0x/eA\nzH11uISifkgk0I01ecoRVMul0PStX1KpaVSP9jAGePVLeG/fueJiREQDe9gO\nPQBEJ5apU/+dmkEJ6Fn7tjfhavao6gnj+TpijqzhyrRXKdU6R7su/sAmKjSH\n7Gx5\r\n=xYtY\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCICaaICLZIg3jm8TvND1x8IFlD0KJ5Q9liDw2J9kAl/OqAiBuOZWI0H+3P5PElXnTSSKEjKFW9qLCN5WUD1BK0/5nXg=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_4.1.0_1544570408931_0.23987049956174755"
   },
   "_hasShrinkwrap": false,
   "deprecated": "New custom equality api does not play well with all equality helpers. Please use v5.x"
  },
  "5.0.0": {
   "name": "memoize-one",
   "version": "5.0.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.2.2",
    "@babel/preset-env": "^7.2.0",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^23.6.0",
    "cross-env": "^5.2.0",
    "eslint": "5.10.0",
    "eslint-config-prettier": "^3.3.0",
    "eslint-plugin-flowtype": "^3.2.0",
    "eslint-plugin-jest": "^22.1.2",
    "eslint-plugin-prettier": "^3.0.0",
    "flow-bin": "0.89.0",
    "jest": "^23.6.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.15.3",
    "rimraf": "2.6.2",
    "rollup": "^0.68.0",
    "rollup-plugin-babel": "^4.1.0",
    "rollup-plugin-commonjs": "^9.2.0",
    "rollup-plugin-replace": "^2.1.0",
    "rollup-plugin-uglify": "^6.0.0"
   },
   "config": {
    "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint src test",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "d143f883ff81dba9c46f148d212337667b941a99",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.0.0",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-7g0+ejkOaI9w5x6LvQwmj68kUj6rxROywPSCqmclG/HBacmFnZqhVscQ8kovkn9FBCNJmOz6SY42+jnvZzDWdw==",
    "shasum": "d55007dffefb8de7546659a1722a5d42e128286e",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.0.0.tgz",
    "fileCount": 9,
    "unpackedSize": 17530,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFyIzCRA9TVsSAnZWagAAaKMP/2h0YFdzhmOTuCFobs7B\n9ljS4O81+nSupb6gwmhpStZb4397I8jmNSUxl/16y2fDsBurAc8XOJu/HSpk\nBatqnFo1JNU8tk+vWY071pGW1+lTGIVTvjCRX7Gaj3wDtYL4x6mW/4E6wwMm\nGTdrYoZ2qGseVtXmZgWAa+OmnKEibzLMmDzHzMONNQ8G0httDBkLu+LQTH0+\nAh7qQGTSlS+HOrDNTzISWJ6nlI1osMJyEbXhIrq7ZfFsjApmduG8sGMiB8qI\nfzik/eukVbyCYdCjTsBUnUysh5ksWsIRwNuihkdRwXHogdZvYScAo9FsMHNe\n5KstiRLC29YEIlnkpYuybTjQN2ioWuKd9FLGg7hUKyFCVgf+7XUq5+18cY6P\nVcM7vIhrBxjQK7q9Ky9TGgPpXj3aUmyw0SwEKiMK8grWY1DGmwBR3XTmYn1t\nGkhHxHt036IUU+MtSeO14Oo8OfWV6Iac/UeriohS7EuiDFHTr00wuPIN4chR\nZBj9Vl3XFQpEy+mR+zoF20WGKzZcG8tc90PCDDwEia8S/PnqaAidsLNkWZrF\nM1mQAGHSkxa/Tk39K72qcmFDk3n5zwIQMUrcxE0ZPZ5fZo40bTMtaoFMQkHU\n6R11m7V2vZkFHczn/ZfE9Whm5YwWw6Ojgou1EZA2QI1nj+71BovtVcQbHq3Q\nwaD2\r\n=CSVx\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCICpo3FT0kiRL4Jvn9Ll1UILdP29B7GvM7IS5HEJ4SeNtAiEA0w8sZbiESty/3tHh8ZKNk8BRCVOEwkdT7rlGf0ysSNs="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.0.0_1545019954655_0.4306266870504094"
   },
   "_hasShrinkwrap": false
  },
  "5.0.1": {
   "name": "memoize-one",
   "version": "5.0.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^24.5.0",
    "cross-env": "^5.2.0",
    "eslint": "5.15.3",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-flowtype": "^3.4.2",
    "eslint-plugin-jest": "^22.4.1",
    "eslint-plugin-prettier": "^3.0.1",
    "flow-bin": "0.95.1",
    "jest": "^24.5.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.16.4",
    "rimraf": "2.6.3",
    "rollup": "^1.7.3",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^9.2.2",
    "rollup-plugin-replace": "^2.1.1",
    "rollup-plugin-uglify": "^6.0.2"
   },
   "config": {
    "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint src test",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "7f638eef73a4dcd9cb6925b616c533504a7a0ef2",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.0.1",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-S3plzyksLOSF4pkf1Xlb7mA8ZRKZlgp3ebg7rULbfwPT8Ww7uZz5CbLgRKaR92GeXpsNiFbfCRWf/uOrCYIbRg==",
    "shasum": "35a709ffb6e5f0cb79f9679a96f09ec3a35addfa",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.0.1.tgz",
    "fileCount": 9,
    "unpackedSize": 17455,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcmsGvCRA9TVsSAnZWagAAQLAQAKG45/iWEpoEmcxmP/+K\nLIeME/66grX48s+xXkYUBtxpODmO/8ZIFJEo286tsNPGtxGNWTnJOKQ8+dGT\npQCLmMldLStXWAxBQMxA1G2aMR7dhdCyrqBZ+/d5QaBiAjZy/0WIF4GMoD3G\n3ifSjIXtQxk2spWhpxXaidlrangKVJYZcKvFhQzkYvklKX2mNsZJPTd6yhb+\nBW9soCaHiZdF4VWny2Fgf2inOv0Z4vs/zZUBYayIhCD9LuhvH1rcFFKLvULo\nqF+1AW8LQFi1/KBCdfEHsHEFcjtZ9/TNWQHEXmA13lBfdEVG212yLgTs7Le1\nmnm1Ae22hDUY7ntlOJzyL5EHBhVADeQqk+Kd5TAqOiFjGR8Q6fyHuFiAgSv8\nICvKQvG8V4+o73UvUHfWWKOENF4ZMLKKw5QqAu+xhGRHN0DiJZhkPHM9SVOg\neFC+jptfyE1qneRnMcLnnkDdTS47gVmsmpwOE4bSXV7JeGq+o7C7BOe0Doqs\nJ9XTuaDbQTbhnT0iyN+8Pbb+iLz68GzYPPcVULosdp9GTl93RE9aG+y1HTmC\nk+9hauQljcIH3wZZbvOG35Fne25if2U6RAO64J2tnqzoROeArrPSQ0K9wPs0\nzInuyAJLc8ABePTvOHf/hv21Uk2l8JN76WCIPAaZPSBCIrRq7QvHtyBTHlkr\nuWVo\r\n=jBeX\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIA9NHmytKfwpqS3ASVnNgmnvNKhi/La7AIqEKjS6xxwEAiEAlDd9SR8kNOQPFJUF47wgc+6uie07Gc0dWMQOHrpI85Q="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.0.1_1553645999109_0.19381473128783688"
   },
   "_hasShrinkwrap": false
  },
  "5.0.2": {
   "name": "memoize-one",
   "version": "5.0.2",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^24.5.0",
    "cross-env": "^5.2.0",
    "eslint": "5.15.3",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-flowtype": "^3.4.2",
    "eslint-plugin-jest": "^22.4.1",
    "eslint-plugin-prettier": "^3.0.1",
    "flow-bin": "0.95.1",
    "jest": "^24.5.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.16.4",
    "rimraf": "2.6.3",
    "rollup": "^1.7.3",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^9.2.2",
    "rollup-plugin-replace": "^2.1.1",
    "rollup-plugin-uglify": "^6.0.2"
   },
   "config": {
    "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint src test",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "prepublish": "yarn run build"
   },
   "gitHead": "04094ecbc03a3873f6bb967fb302276e92cf637f",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.0.2",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-o7lldN4fs/axqctc03NF+PMhd2veRrWeJ2n2GjEzUPBD4F9rmNg4A+bQCACIzwjHJEXuYv4aFFMaH35KZfHUrw==",
    "shasum": "6aba5276856d72fb44ead3efab86432f94ba203d",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.0.2.tgz",
    "fileCount": 9,
    "unpackedSize": 17404,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcm/heCRA9TVsSAnZWagAA5VsP+QCaPhMCiT9+UUQK0ZTB\ngqscbFUQoVt4wiQqJ7RaMzVAp55/QLulVwRyemA9WQ6rv0aXCgcKEIXPDk2V\n4gmzoRIxjxrhEoDvop8VprCqdJmljkT3IoM1r7Z8DqGoO4T1yLBQSBBV9muI\nQ87kNKeD2TfpNu2LUuJbLdjorwBgTb598jcUVQMqIl8IpOImJ9jPVkLmddrr\nQinJWTSyKms4Y4Ew82o/dIEEpLqmuMBIsj+kuj+JNRA4zwr4DMxcGezQzTAF\nfM4usLvd1eKnFX3mJnxTH6i0pz9n9DInN27to5jmWqdcH7RnYD4fgMl9rAtL\nLT3FZ/AQGUMYPbuCRbsdiGjP2Bc6EnWN6e6IgOTQwVAv9bVndmWaQq/N1LhA\nK8HOlm7Vzq/Li5UEkGdHA9V4uGXj2hkhvMq6F97PhXpZHwHr8CZvnoRiy6fU\nymFYSS18REyHjhNa+CbzIpfqfEdZOARFZqiNOIfJZyLWKl6TuTqTDq8fLskS\nLLM5DFns7ahJlFdC/kvxGAv4JbJ7s5h9Sa8whH12HXoE9YMZ1Fk4j41mxq6f\nwJ1+w0ex7Ktwql2PBtUVa49Px81fNllEayT6YhtOOwNMeCXOZ2EsbbDX2xGy\nazftB3ZsnI2DNhjunOwgxeaNqWO8VsLA84jqy+aQp9lOYwxTf8H8HS1+gagg\naiRe\r\n=bs7+\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQCF0sQnGHKy1eQpEKrGO92/iTbfFXLASRz2V3+X4wfVigIgK9IcJiGieAIx1jFgJvBKccerSy9Sg0pN9LJFKz36QuU="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.0.2_1553725533738_0.1932929672873953"
   },
   "_hasShrinkwrap": false
  },
  "5.0.3": {
   "name": "memoize-one",
   "version": "5.0.3",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.4.3",
    "@babel/preset-env": "^7.4.3",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^24.7.1",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "5.16.0",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-flowtype": "^3.5.1",
    "eslint-plugin-jest": "^22.4.1",
    "eslint-plugin-prettier": "^3.0.1",
    "flow-bin": "0.96.0",
    "jest": "^24.7.1",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.16.4",
    "rimraf": "2.6.3",
    "rollup": "^1.9.0",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^9.3.4",
    "rollup-plugin-replace": "^2.1.1",
    "rollup-plugin-uglify": "^6.0.2"
   },
   "config": {
    "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint src test",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "perf": "node ./benchmarks/shallowEqual.js",
    "prepublish": "yarn run build"
   },
   "gitHead": "da141a711e6f70395c34db9d1c7a343c7e670c46",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.0.3",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-hSFNx1nYJZ1fUmhBa1ZNI5ZEKsWGks6yp3yX0v2hHOF7D2VJw+fRkzkoA4djB5itv+Nk0piLOelgiPPKIVBBqQ==",
    "shasum": "2f2ec6f21df48f41caa9f5e873b3dd09650d1d38",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.0.3.tgz",
    "fileCount": 10,
    "unpackedSize": 17677,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcqsTsCRA9TVsSAnZWagAA7mMP/jrA9ZALYzQtYrzzDaLe\nu84Kdh1W89Cp2OfwMauEFz7sCfLAtuep2+SvDjv8YEwAQaHdRFsdqb8LtIEq\nwiEcQBcJ0iwdbViGBMAZyIfJm9L9snREq86DyUBUwLwhiTm9A1CabTBT/Uaq\n1hRNTkAovruIolJW25IoXmAQ7+XsPeeTeKWFDozyHeabj1M03J+PDzTPPOnZ\ncelIrms7ong7tmurodQWv+HeSU4B+fnbhU4c6qWyzfxY+whPDpUhNydi5Y+O\nkoLcrAP8cy9CQdNBFujlOQP10ZstPmqRhH/EYLXtXIKeywJ8F6f72jnyhcRH\n1I5ncNWs3IczOGPqWY23qvfq0WQwUkACNM7rwCTI69d14/mYdo++HWVTpKWp\nlkfLFS20p/IG1XrsSG+ubESihVpN2k7srhIXbgfgM253NyLYAK5+Wjt7xqVp\n5QBL2CAI57tdxSo9IdwwM+/XaO6APP3uq0zVdRrYAharyu4fPIO2Hmypbnh/\npKU8Pi5GICK8dUnKpXT7Mg8ym95oVgeNicdCLAn1VPt0dQmWrho+VlzVITWx\n0F8dLJjDXhv5hxy2qFPU24rs8LeFRTj6gZm1bNVoWt685yKi2f+XgLKnmIzx\nAhx3hsc5u4/nJDmR6vmjy0oUfn4Xo+LgK6dbqwunkCMjNFwvv6AwQNQ8rrjy\nE45Y\r\n=VXt3\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIAgPvfrGSIFE3YMNNVpbC94RtLJQOKu/StehSYC+qEMDAiEApRCjwIaRldYq71ldpYBkwukTRg957CF32/SLDDP5hxs="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.0.3_1554695404052_0.08966463574835615"
   },
   "_hasShrinkwrap": false,
   "deprecated": "New flow types can break consumers. Please use 5.0.4"
  },
  "5.0.4": {
   "name": "memoize-one",
   "version": "5.0.4",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.4.3",
    "@babel/preset-env": "^7.4.3",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.1",
    "babel-jest": "^24.7.1",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "5.16.0",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-flowtype": "^3.5.1",
    "eslint-plugin-jest": "^22.4.1",
    "eslint-plugin-prettier": "^3.0.1",
    "flow-bin": "0.96.0",
    "jest": "^24.7.1",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.16.4",
    "rimraf": "2.6.3",
    "rollup": "^1.9.0",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^9.3.4",
    "rollup-plugin-replace": "^2.1.1",
    "rollup-plugin-uglify": "^6.0.2"
   },
   "config": {
    "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint src test",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "perf": "node ./benchmarks/shallowEqual.js",
    "prepublish": "yarn run build"
   },
   "gitHead": "ac426ef9eb28f94feb8091dc31564992f4af651c",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.0.4",
   "_npmVersion": "6.1.0",
   "_nodeVersion": "8.11.3",
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "dist": {
    "integrity": "sha512-P0z5IeAH6qHHGkJIXWw0xC2HNEgkx/9uWWBQw64FJj3/ol14VYdfVGWWr0fXfjhhv3TKVIqUq65os6O4GUNksA==",
    "shasum": "005928aced5c43d890a4dfab18ca908b0ec92cbc",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.0.4.tgz",
    "fileCount": 10,
    "unpackedSize": 17573,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcqtKTCRA9TVsSAnZWagAAt4gP/1NL6hr0j+n2kTEsBM4v\n77JJ0uARi2tnCk0WBK7+cVRW4fihOhSdOl/iW4jO3NqtI3S4pam9S489ukrX\nvPsoKmrLS8CK4O6BHYxvQ+QNbWCKwo7f57LvdCig+bdjQAYctOuWMmDDyVOa\nXGRUZRfNZtGObch/wDpW4SGy0cW96CleoARMd3VzoiT0+K6JUKOxNXNa5csB\n6H8nlM/9sS76oGZvIRZqmjkRcqjhwEpHiIdLMa7MS/U0+jkRt5UFXLQnALf+\nq6M0zVB6QBo0oWTcnO+8qDwkU4qqAIt+m7xF6KWeDCG9716JLeC6aXp6kleM\nYBWMUkYsdo4nm+6QsBjsnua5YgqiNe0oUv5sHRqmlmFSS9OKWfhQvm6tIIh/\nMdluPF++PUO3ix5LYkSoLLjHJ+euYrWv8m/hAWSWNBuvQyl9aZ2Ny0kCO0xg\nfZ5fznBRX80Id7y3STxE0rBPly19r4YKX1WkItwEgp0f7AIl9TI/Q2XVy1dL\nA9pSbUonMpdQqLRax8UIvozRiwrIdy79LW/RnXKxdSsbDOvGSHvLrltqPFzg\nvSp2JgvEecxObKdxutVRZFqraPMWAdkcQSM/4hti0G6kJxcxKmjoigODtk8y\nC4sTmU8QLLVuH8S48tauAymCXQWaB5k2IJ7L84qL9awMEK9pOTTtua7Rxu6P\nUMNj\r\n=yv0l\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQDJwkAku3qkDds/1TeihR3Ei2QSx2vlWhYUnN/r/laeBQIgBG51zB3BkBUs+wsylU4uPN3ZiMMcXeqbsIcnMqH2tdw="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.0.4_1554698898798_0.14814520289263444"
   },
   "_hasShrinkwrap": false
  },
  "5.0.5": {
   "name": "memoize-one",
   "version": "5.0.5",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@babel/core": "^7.5.0",
    "@babel/preset-env": "^7.5.2",
    "@babel/preset-flow": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "10.0.2",
    "babel-jest": "^24.8.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.0.1",
    "eslint-config-prettier": "^6.0.0",
    "eslint-plugin-flowtype": "^3.11.1",
    "eslint-plugin-jest": "^22.7.2",
    "eslint-plugin-prettier": "^3.1.0",
    "flow-bin": "0.102.0",
    "jest": "^24.8.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "2.6.3",
    "rollup": "^1.16.6",
    "rollup-plugin-babel": "^4.3.3",
    "rollup-plugin-commonjs": "^10.0.1",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-uglify": "^6.0.2"
   },
   "config": {
    "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn run lint && yarn run typecheck",
    "test": "cross-env NODE_ENV=test jest",
    "typecheck": "flow check",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint src test",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/memoize-one.cjs.js.flow",
    "perf": "node ./benchmarks/shallowEqual.js",
    "prepublish": "yarn run build"
   },
   "licenseText": "MIT License\n\nCopyright (c) 2019 Alexander Reardon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
   "_id": "memoize-one@5.0.5",
   "dist": {
    "shasum": "8cd3809555723a07684afafcd6f756072ac75d7e",
    "integrity": "sha512-ey6EpYv0tEaIbM/nTDOpHciXUvd+ackQrJgEzBwemhZZIWZjcyodqEcrmqDy2BKRTM3a65kKBV4WtLXJDt26SQ==",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.0.5.tgz",
    "fileCount": 13,
    "unpackedSize": 17622,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdI+0JCRA9TVsSAnZWagAAxO4P/2e3dMj//eZA/0wfLHgl\nwwmxXMWKgqhA0BYYHbEFPGgCNvS9S2O+OBcaeU/DnQdt8l5GnrGMOBPFMd1H\n/KT3Fy3X+tiWXU01BH7JljOaGWI+ojqfTaphiNba5qGNLRQOFLLPhNMQKmUV\nWSGNHx/5II7vObwE0olVa9h4bYhiTvqq5C9RIbfcISlpcpjU0uRrA2TQz71u\nfu+gPOdSI72uk/ktkpCQbqaO19T2xcW/UXCypk4pOcn1JZcHK6P5KkXHcKgf\nfee4IjRBmvxFpzr9WXj6gct6kD+WJc0HQLcwIonXmL5VVj1Vj4ejaTtFHe16\nR37Pq4PxKt9JHhHyjS5bJUYtDDghUsh7Vs1vZVAhDSRxZGrGKWuKo7rgz5sW\nIsJWT0562PtErAJzSmx/JhU3r/eA6jSkPHiGnd/qVpUxcZpRHX+q2EQ8og/M\nS1ZLVHsQjX/Snwu+hidz67pKKmYgab4S3MIv+Vut7iewIHOsIJ4kXCnsycr+\nn44Q5lMme+fk7cjqlE7INtM9t6FFoY8zetWlNPehpWQEe2AIJWDm9kFjsVxh\nYY9jY2RkfMBo8aItauTvINgz6lHBODac2lFyiGQS4mDVBmj3IJ7smvtamXwM\nmTz8P8txEjPb8xiWcpR6ftyqRQEPzSuQE4yfbpRc2f/5AztEqMnEjrKjyvDX\nU2gV\r\n=zVzr\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQCEIduLC7Gau6JmtAWEhwwmOCLnqGB4xJVPzXw1GiGRRAIgT8o929JPDvmfIuInlcYw1kydN0onG1F1bpdLVctyE7E="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.0.5_1562635527126_0.36029147481214174"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0-beta.1": {
   "name": "memoize-one",
   "version": "5.1.0-beta.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "flow-bin": "^0.105.2",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-commonjs": "^10.0.2",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-typescript": "^1.0.1",
    "rollup-plugin-uglify": "^6.0.2",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![min](https://img.shields.io/bundlephobia/min/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n### Standard usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Module usage\n\n### ES6 module\n\n```js\nimport memoizeOne from 'memoize-one';\n```\n\n### CommonJS\n\nIf you are in a CommonJS environment (eg [Node](https://nodejs.org)), then **you will need to add `.default` to your import**:\n\n```js\nconst memoizeOne = require('memoize-one').default;\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\ntype EqualityFn = (newArgs: mixed[], oldArgs: mixed[]) => boolean;\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\n```js\nconst simpleIsEqual: EqualityFn = (newArgs: mixed[], lastArgs: mixed[]): boolean =>\n  newArgs.length === lastArgs.length &&\n  newArgs.every((newArg: mixed, index: number): boolean => shallowEqual(newArg, lastArgs[index]));\n```\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance :rocket:\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health :thumbsup:\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- [`Flow` types](http://flowtype.org) for safer internal execution and external consumption. Also allows for editor autocompletion.\n- Follows [Semantic versioning (2.0)](http://semver.org/) for safer consumption.\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "2e83ad9ca8bc0a4aba4b66c2a5775bc2a9fb8cda",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0-beta.1",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-gIaavk1kXPGif7sGbkPZadR/Bkf/S3lYI2FHBqQFMyk9v79sCW8zjoiLJjXf6UARO4I59rnZOP3UWhFkC/Hyjg==",
    "shasum": "e799e38e57a560f38352520995ecf77e8b04df35",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0-beta.1.tgz",
    "fileCount": 13,
    "unpackedSize": 18846,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW0PVCRA9TVsSAnZWagAAFioP/i7r9L0F2AWbh/iWNOCR\nQLOln2sy4vauVgjjKUSpTZyLbOqs6lkGBdRTfpVhNXkrXLb0xTGBGKnhIPbZ\nG4UGFAJi/DI8rjMxkGuyus4f464H7AjuzhO1q3dICL8ye6g2WN08FgSQWjvc\nf81sLZJjMQLkO8WhEbVY6jBeLjLfBC/yqDXSgB5Gum+oFm4Lpf26KvSYVr66\noVTD+U60bSUUgha/UZ/ehn6x+qKg/VcO58LP8c7kr+9xgqQUXJNaskCC3lfF\nAbD/eGXUWGajPIoM9bw67602/HAId1185UVUyZqJVG6kWCGkYxRNvXA6FR1Q\nFWNaKPyJMCA3Lpo/wc2SwxNu0LwN8NTz2gi7zL5Ql8eGew4a/92/+VuLYLqm\nowBUowcDZSvieXSbJiMzt8dkx108C5hv/0I7tCmpK00oXv3PqMVi6F8PMkog\n6dOiDPNbXGAxOhGa9yKqd7JbxH9gD685CSdb1hwY1DmgfKpjKHnkM/o17lwr\nrAErNW77Oq1zAZq3GZdiUFi71nsrrpJhYPCMtWYWEnm4emfCol7vVDaoQeHz\nK4k8sUwydDWpJe5avu8e9Ze+ryIx59hWBo81Us448mnC/fBwXzDfzbj84c97\nqUumWHn2WDUkafvLQQkkZTk8rvqXQCbNtIe2q0YYSYsTeK0EyFpWBnM56yQl\nOvU1\r\n=sZS5\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIGL2bLVENlFpIk27TUVStxLOU7gn6B6Ac6KSqaFn5qPgAiBAr3iCTeTUWIKgPlKHq9jokgApH4CD9X6B7NTtOI0gtg=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0-beta.1_1566262228713_0.1440641529175708"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0-beta.2": {
   "name": "memoize-one",
   "version": "5.1.0-beta.2",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "flow-bin": "^0.105.2",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-commonjs": "^10.0.2",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-typescript": "^1.0.1",
    "rollup-plugin-uglify": "^6.0.2",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![min](https://img.shields.io/bundlephobia/min/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n### Standard usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Module usage\n\n### ES6 module\n\n```js\nimport memoizeOne from 'memoize-one';\n```\n\n### CommonJS\n\nIf you are in a CommonJS environment (eg [Node](https://nodejs.org)), then **you will need to add `.default` to your import**:\n\n```js\nconst memoizeOne = require('memoize-one').default;\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\ntype EqualityFn = (newArgs: mixed[], oldArgs: mixed[]) => boolean;\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\n```js\nconst simpleIsEqual: EqualityFn = (newArgs: mixed[], lastArgs: mixed[]): boolean =>\n  newArgs.length === lastArgs.length &&\n  newArgs.every((newArg: mixed, index: number): boolean => shallowEqual(newArg, lastArgs[index]));\n```\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance :rocket:\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health :thumbsup:\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- [`Flow` types](http://flowtype.org) for safer internal execution and external consumption. Also allows for editor autocompletion.\n- Follows [Semantic versioning (2.0)](http://semver.org/) for safer consumption.\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "21e3715ce0c82d60fc5e73cbeb96ee612436a3c7",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0-beta.2",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-0V4QdFSeQrJb2KbthcbZzTlUVNOl09OPpxFWbxGecz7Px8Ntickeue8I87Sc9nV/LDA3seiXwFNhi2SN9WQXig==",
    "shasum": "bbb4fe7d452708aa54ab04f1e1060a13c523c7d5",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0-beta.2.tgz",
    "fileCount": 13,
    "unpackedSize": 18956,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW0/UCRA9TVsSAnZWagAAVywP+QClIZEwF6/UEDCQLKSA\n4JD8stRLhuIo+U5h/3dk1MRgUPEUFsl8e0wkgi7LqfmAmnoPVcwHotdYvA2+\naiF6shavSCdNq+A/dcHCHFF8pLH+E/BmtLx+c8Vxb+/XrjBTkhCbB8iD738j\nb+l8zvhWDEi9LFtnLgLJ4hEfu2xIEfJLIbGcq2ZTz+DSeN0wAwMhuNUQbXuZ\nV4ZsIMmyIQfH4vkdaErB+qDpynVflBLF3aVklgWO3oQvFmP5AV7C0wbt7jM8\nkMQCKYX6Mrswqp/nNFAnYRD3YER2LoBUidvE8Foao8L8ho5YVRDaDXs5jMRX\ndC5drFj+fvmjlVM0DWE1W+NTffz10r4fwMosn6gIMtA3LGwjk3RCRE9EHDm9\nWDqeeK1P5655/pylQnprTgxErBC3alxbNGvZmrPG1/o5CV8O7ireG4HCRo+b\nMiry2nHUg80UI4L1LyJ08tQfOw5Jg4+iTJD5QQgdYhReQU/e/NDeO9anO/QZ\nS2MWRXk5X1MDF5NVv45oSueUpmmh2xfiJaRnVMhubO/zWoO4dyAKgGv4LN1A\nKEOJg9su/cKLTGHm1XaRAQecp4QZbDIpg3x6hP69pgsDv2W7V8OOv2QpA/q0\n/DuRphW/pQTqh3VQAyr/qKilTGHF4weZo7v9hmCqWG0Snanb8oiRYR3WJXO9\nuMHZ\r\n=1xbJ\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIAyotvevId4R+yOyu9WoFEwEOJ4xq2giSfNTszJnQRViAiEAzBz9dlsDiOzbRQxjZ1esJxztnwXF42XRIw86DRoKSh0="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0-beta.2_1566265299483_0.5750751587036571"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0-beta.3": {
   "name": "memoize-one",
   "version": "5.1.0-beta.3",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "flow-bin": "^0.105.2",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-commonjs": "^10.0.2",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-typescript": "^1.0.1",
    "rollup-plugin-uglify": "^6.0.2",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![min](https://img.shields.io/bundlephobia/min/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n### Standard usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Module usage\n\n### ES6 module\n\n```js\nimport memoizeOne from 'memoize-one';\n```\n\n### CommonJS\n\nIf you are in a CommonJS environment (eg [Node](https://nodejs.org)), then **you will need to add `.default` to your import**:\n\n```js\nconst memoizeOne = require('memoize-one').default;\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\ntype EqualityFn = (newArgs: mixed[], oldArgs: mixed[]) => boolean;\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\n```js\nconst simpleIsEqual: EqualityFn = (newArgs: mixed[], lastArgs: mixed[]): boolean =>\n  newArgs.length === lastArgs.length &&\n  newArgs.every((newArg: mixed, index: number): boolean => shallowEqual(newArg, lastArgs[index]));\n```\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance :rocket:\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health :thumbsup:\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- [`Flow` types](http://flowtype.org) for safer internal execution and external consumption. Also allows for editor autocompletion.\n- Follows [Semantic versioning (2.0)](http://semver.org/) for safer consumption.\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "9b2febe8b82927c115e92f9587aa6506c14d78e0",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0-beta.3",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-f/ZFA1HpAiE3Q/O61DBjZhKg77zustHIjnH+lic+Q+SKhcBD13/W1nNLOK5y/3ziSWb+VHqAV4hZaPKVJTYpPA==",
    "shasum": "ffb4b6d54fb6af48dc50aa7dbcbf65cda8717a8e",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0-beta.3.tgz",
    "fileCount": 13,
    "unpackedSize": 19330,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW3IYCRA9TVsSAnZWagAA9P8QAIR/uvTmyDAdOaFGQGHR\ngF/nBHZ9cgCXqFvADWtUs/4QqDB4cdc/3LlHc3t7K0M5SWfjhQkDNklMa8+3\nL4OXgNo9jwoIjixiykheDYH+rkLr1OjbfclMdwtL7I3W/Q5NKbBmkJGC8Fj4\n7wq3nf8Flv2tdD6JHSquoLM+x0cdfOO6I62SfS7dKLJI9M6sr6K7lhbHGFUF\naBRogUR0nGTo57GS4SDLbcpNnJlWjNRSUhCC3RxUzLrh9X75LytfsF3WRfzw\n3inFr3Hw4xrmGB2/zHnuP59odoy2sqFjfjLyoys/KxqsnhVS6DkHlDjrSS5u\nYaHe+Z1DWsPhC3nak1KhzAqcZmuN6E4jO4iAnMRXhi9ilyovVUfAeCKL1nVy\nkW+Zn3irzlBLrl9r4rt5odADk7F8Ri6yCzk5BejPyHroz3G1RIAV6KP435Ou\nP1pGMFnuxSeAWNKU4CqKFEJHICdp0C6aWb07JiLxvFGzhBhLFZX2CmGO/Xwe\nSWm10k/KagjnDXvAxNOkmsmiktMp0Oj97UL+wPp915XU9ITGdDLXoRhrWpBD\nnF/B7fTYd8BSS2aKj3/T8HMfiFYNMOZaKTcoBFDgxoqVJbCBywaHcy1ZCr0S\nOYlQFlkRrHlc9P841+mFIEuQ59h+FP4gFMgChkgxUnb9LYrwoRdvzxVJQxrr\n3eNO\r\n=L70n\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEYCIQCfAUDwi4lkpq8bp4y+mmgdO0mKOQ8dOyeCpF1neAaeKQIhAMUbLFsweEdsPRZP90HGTQl02J1Cg8Xv9cTOpQqPU4dC"
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0-beta.3_1566274071702_0.8855702869511366"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0-beta.4": {
   "name": "memoize-one",
   "version": "5.1.0-beta.4",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "flow-bin": "^0.105.2",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-commonjs": "^10.0.2",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-typescript": "^1.0.1",
    "rollup-plugin-uglify": "^6.0.2",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n![types](https://img.shields.io/badge/types-typescript%20%7C%20flow-blueviolet)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\ntype EqualityFn = (newArgs: mixed[], oldArgs: mixed[]) => boolean;\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\n```js\nconst simpleIsEqual: EqualityFn = (newArgs: mixed[], lastArgs: mixed[]): boolean =>\n  newArgs.length === lastArgs.length &&\n  newArgs.every((newArg: mixed, index: number): boolean => shallowEqual(newArg, lastArgs[index]));\n```\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance 🚀\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health 👍\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- Written in `Typescript`\n- Correct typing for `Typescript` and `flow` type systems\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "b2ffc547f875b0b8e6b232cbea0e0ba7d730fced",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0-beta.4",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-W/E7r0eGc+SN/YDG61ePCIhAT7ptTx4uWx8apUnFMRhQnUFZEdttr9dB93Hm6wSO5Ga71w68m1eYoUzQIP31aw==",
    "shasum": "a237ff450ff77879a038090f3d67198ed334f9ca",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0-beta.4.tgz",
    "fileCount": 13,
    "unpackedSize": 18487,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW4SsCRA9TVsSAnZWagAA7u4P/A0fDuwAU5sIrWE+RX7O\nOWujm+COC0RCaBcbH2PXOmrLLnguuVSomh5InrhkT28v7nX/gzrgjdyFKmnX\nNt+4YhItOosQe4YChN4xve0UGK7kCUCIlvjqMUh2jWRVHg7fTxRJe5ZsfOSf\nTiXqBvM0icCDlK0sOGJGjr3ZwuYVS4S6e7JXlv3YPqp97ctKkx2E5NZLf7Nl\nMun9MlUTMCgOR6IGUGVe0XuQATz6/Z8y7LWGjveL3mcB23oZswLNMzj0WMgZ\nMz0atm59YoJgsQgvQQ3scBSEWyYKy4lHIoGxj/x4fxacXZarrHyQxHpFhZQ6\nTmAtJdZ5JVjzO7kNdRyU8VwZj80OoDvMRM6vOekf8z3HiMU7/XgHUCslVnn2\nRFa6gEKTbzYYhnySalcYjykBgUi12oHHvnwxhGZXXaIHbcUS5Ml0gQiiHP9c\nuTReoWfvD7MDeFPLo+mLYHTM26zuXF6ae/5lcywUkgggHks2g26PNIbEqOGb\noJDUF7pKracbcfjP7ZnAcVUjyGHEfvSPT2uuIEiLjOmDwsUWYCTbNE2rBv4V\nCp6gY+XKyWvbznjchHczYHPQ+ZLnYHbiouptMfTusfuc2ZVFrwDT+4NGbKko\nELQGf8vUxlp3D1/J5jw+l0s50hmhXwesERhi10WCrlAiCpgqw/lgBGXL8OBo\n6dTx\r\n=iEg8\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQD11/8ORngwPrmGrgG43Kb7sp+mDpTRMvRM0d4kQhdJNwIgELmuXApPnjwNwXiduTbUO3+hJK7mr5kiJD7bjEMy5dE="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0-beta.4_1566278827458_0.3084208499211827"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0-beta.5": {
   "name": "memoize-one",
   "version": "5.1.0-beta.5",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^5.1.1",
    "rollup-plugin-typescript": "^1.0.1",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n![types](https://img.shields.io/badge/types-typescript%20%7C%20flow-blueviolet)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\n```\n\nThe quality function needs to conform to this `type`:\n\n```ts\ntype EqualityFn = (newArgs: readonly unknown[], lastArgs: readonly unknown[]) => boolean;\n\n// You can import this type from memoize-one if you like\n\n// typescript\nimport { EqualityFn } from 'memoize-one';\n\n// flow\nimport type { EqualityFn } from 'memoize-one';\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance 🚀\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health 👍\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- Written in `Typescript`\n- Correct typing for `Typescript` and `flow` type systems\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "a80095da6a3ad83a8caa55888e84c1470258830b",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0-beta.5",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-QS9ULbGG4sr6Xl0b81RfVUUxXbd40BfdAbuhkK0lc+FXCb+bE63CkM8lp96Kud5wtc3aWbTIMdD63oSWYiz2nQ==",
    "shasum": "438b4c58cbf1a9f23ce6d04f0633c328daecf197",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0-beta.5.tgz",
    "fileCount": 13,
    "unpackedSize": 18039,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXIr6CRA9TVsSAnZWagAATkUP/jglW7kvfuZ9h33e0/b3\ngwPEV76J6TRiPkxlfEuINCM+f6xP9L2F1dJI/aUUDgOX6S80KamVlID0o5uJ\nvDWsEIiYN0CaJlGcAGzW1xrPhohnUM+wxNug2/7wBFZL6R+JiM2MjGTXy+jA\ncG9ZXADHxqZ2wgyS+QmGc9gT6xtM3dTsPAXfgQxR1xc13aoLoQZVEEcAbv85\nOePr+2QMEt79VVS+i8QCCjtHbnD9JAUAGY2v3mYTIVrH64r1d4EHUHWqgHi+\nwtfl2bLRat7vL2NQyyjwpbxZqA/n4nNiVBCfqx5cURtYC5q9g09mcHaaFQ7n\ng88FvtpzeVIs6TUv/4ipUtmgDUkE4UD6kV/7cUZ7iMbdeHhKqjd5oIBuFmys\n4eiD4QALeESTfp1kYJ5quwcmBqk0y09xjqZ9IO7UVco634HfLQXT/0jMwaSI\nL6GM+K1X8z/qBi9H62wAvxhL9gKJEs/wtLbqNLeRBHzbMnQLcj4mQg5NsGdj\nZk7Rlaa0zx7n4UzeeOM81zk6yBwH6/eZwxgTBcODOB6E0+EEzyO0bzfHvcur\nAf1dckmCGBd5A0/l2HccsM4S9t1KaLdtyQwU36mvlCexu2wOzLLvPDoe90cV\nbYe+sR7JUdza15ka1EJpKHUuGEMjkv7UkFlwgiH/otBeVbe+JRHngC+PHuyb\nKIOA\r\n=SXfT\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIQCO8pWDzmZRoAbXGUitFMpFJWq6ji7XobJn7rl/I3OQzgIgd53Uf5pCp/vc/B3g0ogvIJAS+tHO6tGOwFMUzkEFyYY="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0-beta.5_1566345977473_0.308817424990518"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0-beta.6": {
   "name": "memoize-one",
   "version": "5.1.0-beta.6",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^5.1.1",
    "rollup-plugin-typescript": "^1.0.1",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n![types](https://img.shields.io/badge/types-typescript%20%7C%20flow-blueviolet)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\n```\n\nThe equality function needs to conform to this `type`:\n\n```ts\ntype EqualityFn = (newArgs: readonly unknown[], lastArgs: readonly unknown[]) => boolean;\n\n// You can import this type from memoize-one if you like\n\n// typescript\nimport { EqualityFn } from 'memoize-one';\n\n// flow\nimport type { EqualityFn } from 'memoize-one';\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance 🚀\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health 👍\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- Written in `Typescript`\n- Correct typing for `Typescript` and `flow` type systems\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "47a274f1095933cedb2d1957a2ee82d3db238eb6",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0-beta.6",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-iQe4FX/rOoOKBaKRCdS3KpwH1KERxW/TMn9Y6hC+rEZzc3ePXHwm4P2l1Us2YF1VQxY/ZSeywAcK2a9HzyJ7qQ==",
    "shasum": "e2c4109c02e4479a6f4874648549c72885a70104",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0-beta.6.tgz",
    "fileCount": 13,
    "unpackedSize": 18135,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXJmzCRA9TVsSAnZWagAAAcEP/j68qzlCZtnyg8BLubRO\nMyr/x6rAoWN4Trh4jHTjfI4rO1uCa6kYAalOKhuDhsje83BUvHIvUb/S3byh\nLS0q1ruyKcV7lQ0+81QgO0YZ6xgUjbV6tO8jCk3fhvhTKIWBoFgl2K7D+2zG\npz89Y1jNitkqgifbizTN67WNU9MUQgVS095wIpxeuYpIIth9FJjsH3S4ZHCi\nc1VxmVFOBF2cNYtuN6ln8u5WO+7hoGhOkaMMYYTkcxQ7/jRd53AKzsBqM6EY\nP3xgu56yU27de9sN4FPNIL4A5pMwAfbgVeJrhwMh+4yy9dGAmUZ8C0jYRN+U\nU99kLIfBSyz6DJbh50JhoDiOb/TeN3tTq9EreBqLpteCizUH2hT0LYPt7gyO\n7fYOiqvVwndPWC3opgc7Lc2u80ukk1dWzoLTqxSXjWVLd8PVWAa8AF/GLxxl\nZOJ96e5TOclojHaVMC11KXnB5UZyO6ZYXZiv8+VuyIAPqbgoZHAhZVDeTuiT\neyQFoXjZDOLhobgckbrIPkrjDeSRK5mdbmGZrJ1pzhuHkWaMX1IUUaNjw6M3\n9aVCBI3z9y/ubNY5v8CjbJwybZXpkfFvB0oBU9krV/pgXHsifAkYj12qIjdQ\nm/vOGp4JnOTiLOiVkOIMg2BJsaPkHYNbGPd7DzxaYat1cyCR4WbN57wroJzQ\nayXk\r\n=mRZK\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIFRvRQeQZE0bzj8N+xYm0z8LKxMhrpzzZdW2Pca9Sz89AiAq2Vk11hDn9llDwmpTr4PVTB64SIY2nfAnz15CNU3pbg=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0-beta.6_1566349746489_0.19042184466453804"
   },
   "_hasShrinkwrap": false
  },
  "5.1.0": {
   "name": "memoize-one",
   "version": "5.1.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^5.1.1",
    "rollup-plugin-typescript": "^1.0.1",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "gitHead": "44c5cd4b610345e27affae00b1ee7c1d7b39b5c0",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.0",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-p3tPVJNrjOkJ0vk0FRn6yv898qlQZct1rsQAXuwK9X5brNVajPv/y13ytrUByzSS8olyzeqCLX8BKEWmTmXa1A==",
    "shasum": "ce7af291c0e2fe041b709cac5e8c7b198c994286",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.0.tgz",
    "fileCount": 13,
    "unpackedSize": 18128,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXKBdCRA9TVsSAnZWagAATRoQAI1xxsUt+oTyOpXPGo1E\n6dHWDRDL9PbWPhZz5dfa0bjfR1zRs15ok+i3Z4KctsCA8FQfAlIbATjtyghf\nBq67153x20Cp0lgaaoFAZi4mYTSV/fwdUGZzLt7pJt+KGpc9r9UovRvqF6Qv\nHYiXdLTQjV5Qy+iUh6a7w7GPzSIycMngBUaoic53qmuXYYTyvTTswRlNIW1e\npAfr7M+tPBvo1Zox5fLzy+eCpwLN1+eP2FfR1Y6qjsjelvZv0ReBdsG0nksy\ndJt4DKr5vAHgKPOjIXHr82nvNWl0KRg2ihTIFyn/wKtc37eHMp4D3BWHLey3\ne5R8tlaE37bz6/oGFwtJOBRO8KWH1yDSj1NzWeWEuJ25YRfzo6qt5DzQKZV0\nAcoNNp17Obc0p7k4THhoynbTRd083fl2qDlmy42Q+UAtNeqVu2jPsAaQ/tKO\n42Rsnq9US7Rp/NfSTs+l0LpRmfHjRIETt1Z9FKabl1TYRmIxA9zrogTGKVJy\n5g4njnHFd3Kz21XrNOLPkW/GYiKMgq+yv4DDPSQEwPxPZ+bO5jSoAtLFuku0\nj8XsXFRF0RaFuf0/6veVZlzYr9qbnfoT1ufWHAjmaW6bIxJ3803/JzNh/6dz\nxv46jgh7n8NMOrSbioFIHyc8u0yrJ0WTX/lR3G4/mOgvNEUCrfwOG8RQ8/s7\nolVb\r\n=GmAI\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIHcMB2QkZy0Mw+CughEk4GF2GzYcYhtQNG4QGo3knrHzAiBFoJpLI65UP8KmNi+KP/Pz+gzoXp3jTq7VB/fy9ivndg=="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.0_1566351453048_0.09574075164536744"
   },
   "_hasShrinkwrap": false
  },
  "5.1.1": {
   "name": "memoize-one",
   "version": "5.1.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^5.1.1",
    "rollup-plugin-typescript": "^1.0.1",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "gitHead": "8fd7a64ae6d7505cffc0a7e97075b171f85faf06",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.1.1",
   "_nodeVersion": "10.15.3",
   "_npmVersion": "6.9.0",
   "dist": {
    "integrity": "sha512-HKeeBpWvqiVJD57ZUAsJNm71eHTykffzcLZVYWiVfQeI1rJtuEaS7hQiEpWfVVk18donPwJEcFKIkCmPJNOhHA==",
    "shasum": "047b6e3199b508eaec03504de71229b8eb1d75c0",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.1.1.tgz",
    "fileCount": 13,
    "unpackedSize": 17962,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdX1nHCRA9TVsSAnZWagAALsoP/i5b7NoxwWvFmiYNZwjC\n7mxfGX5o8N0zZf78h5O6KHBeJykTMU8P70Lk0kgM6rl1e+Dk3tPv0BqtWnj6\naqhk1GiO30c2LjBq8QDlvWmdq0dpEUAANedxQW24zHTf1HTi7+pBTELGKdWi\nOFgnPLKTCAiaejMQv8efaH9HSE/FqyM6ryZHX5mSBw/+k86Xca2V/F7bjkd7\nze/10BbUyJ6IPo2HuwRU+8X2pkI6RwlPSgdPvAntbBip92VVsj4tRH8fcro5\nNFBpGaqMTa88eh64GPSSy3OLe/7rq1mm2TcQqbbz3npvA7xYz4CZT5344mmJ\nuzZMq5t7PUBIb8/dqgSOY8qe0/qN85Wg4qfcnrKu5OXJ9zmVNki38OAS+jQ4\nIUkPctyKR07V1QfHn4UX80pNbxeQwCPT+ZLaCxUZBIn1wugKeW5r3WJYednR\nkZcvceOuoY9oixV/Bgu1QkYh2LgTT6RPgFqZPIVWaWalTPUBfCIdht9s43HU\n9z20Id8apWjfA0iwG5b99kcTgM/WMjqZ25HrfLHU4wV1x+vAnBP3JMz0hesK\ncdmjpcbjWWpQBtmJY8zgUi78AFsNKctJuorKIG6BDuWgtrYe6j5R/UWt2YLU\n7JqDg3JfK2plPfXlzAYZPye8MlAfCQXRLUtvXT+XtghPjfOmrUiRFrI2Y1ur\nRqVP\r\n=2NQp\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEUCIBA4zWe0qWBOBONMRlvkeFbuIPXyIjwpFmsf0/M9lM0lAiEA5apWMmvNMv2KpvHT22y+UohYC1i9/Yncz6A3Gi0ZKH4="
     }
    ]
   },
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.1_1566529991146_0.11033357372791275"
   },
   "_hasShrinkwrap": false
  },
  "5.2.0": {
   "name": "memoize-one",
   "version": "5.2.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "size-limit": [
    {
     "path": "dist/memoize-one.min.js",
     "limit": "214B"
    },
    {
     "path": "dist/memoize-one.js",
     "limit": "216B"
    },
    {
     "path": "dist/memoize-one.cjs.js",
     "limit": "213B"
    },
    {
     "path": "dist/memoize-one.esm.js",
     "limit": "218B"
    }
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@size-limit/preset-small-lib": "^4.10.2",
    "@types/jest": "^26.0.22",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "benchmark": "^2.1.4",
    "cross-env": "^7.0.3",
    "eslint": "7.24.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-jest": "^24.3.5",
    "eslint-plugin-prettier": "^3.3.1",
    "jest": "^26.6.3",
    "lodash.isequal": "^4.5.0",
    "prettier": "2.2.1",
    "rimraf": "3.0.2",
    "rollup": "^2.45.1",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-typescript": "^1.0.1",
    "size-limit": "^4.10.2",
    "ts-jest": "^26.5.4",
    "ts-node": "^9.1.1",
    "tslib": "^2.2.0",
    "typescript": "^4.2.4"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "test:size": "yarn build && size-limit",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "gitHead": "1bafd90b35ad9635f2b9d971e1aff7f71aa96207",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.2.0",
   "_nodeVersion": "14.15.0",
   "_npmVersion": "6.14.8",
   "dist": {
    "integrity": "sha512-OiKwjWuxDPHRN5yL9gskqJHT1dr9N99AH95ceiwvpXjE6fpcwAtPHDRoe8CFL1+TMrLG9NzO5WerQ32Q35iD4w==",
    "shasum": "65259224c44b59b9d6648af917108e6867d64d54",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.2.0.tgz",
    "fileCount": 13,
    "unpackedSize": 22442,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggeqWCRA9TVsSAnZWagAAqHoP+wQptig0pDX2hwFOqRfq\nSa3RQOg4eUl4wGXPT2b00epyafas8m0sBO4DLG30aFXp87Zy8jpp1ELVlo6O\nZX+mPfiH6l8UXGJHCg4WWin1Z6khb12EYkC0D6atVfxnlIjXK1rdJbU9g+Je\nmvqG9bwnbVWtC2zdQIV5yPwfQdFEBI1PiKE5mECpLusxzXaiHCtkovT+yr6B\nqtb4X0aaZKXFWBYBZvjeeGrOBnldOpj0gK9D+csZEsMn2xegmQgJZ4+MRrZJ\ncjY2js4airW1X7RjC4uQpWQVJHpP7K+9I790m5a8+v4wbMpBdv0MhzWDfmnu\n1hLzgvmrPieeGrh85HLms2GBhdXT9fhBSza0uF89V/OLrfiYPUBGK5WInR7l\nrdkXsYaW5Y+8/DkeIXlKsa0HNbERhRmAq09jfn0VgnNYixwiwGkVKIInqsXn\nIhDy8qwkBAZjT8VQCrIiGs1aSe9lL//5jpObTDLZE8P9pedwMQBQ0tmvU3D0\n6NkqPvkcMRaUjda9lb4uadlUMpq2mjaGvKMnUIVCBdhxhdmLGLs0Qmc9DdIE\nTdFcunW8akvlzKwAh6cE97wo8xSIh4fpSBFW8gG4Pgubjbn4RiuGoiWZvIFm\nLeYt3p56FFTTMP0SMLg5eFJSf796EECVetoB84gZdFUKOAjV2At15cvOa9LC\nI3V+\r\n=jVte\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIEH413jAYDC1UAQr1W6KZmdqrbxW9BrBF/rBmG2HCI0EAiBvBgGUb+o6tpAP6z3iZhCOIAfRlxMhSuVNFvWvmtfpUA=="
     }
    ]
   },
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.2.0_1619126933796_0.5395531627759844"
   },
   "_hasShrinkwrap": false,
   "deprecated": "Addition of named import caused breaking change with CommonJS build. Named import has been reverted in 5.2.1"
  },
  "5.2.1": {
   "name": "memoize-one",
   "version": "5.2.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "size-limit": [
    {
     "path": "dist/memoize-one.min.js",
     "limit": "214B"
    },
    {
     "path": "dist/memoize-one.js",
     "limit": "216B"
    },
    {
     "path": "dist/memoize-one.cjs.js",
     "limit": "213B"
    },
    {
     "path": "dist/memoize-one.esm.js",
     "limit": "218B"
    }
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@size-limit/preset-small-lib": "^4.10.2",
    "@types/jest": "^26.0.22",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "benchmark": "^2.1.4",
    "cross-env": "^7.0.3",
    "eslint": "7.24.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-jest": "^24.3.5",
    "eslint-plugin-prettier": "^3.3.1",
    "jest": "^26.6.3",
    "lodash.isequal": "^4.5.0",
    "prettier": "2.2.1",
    "rimraf": "3.0.2",
    "rollup": "^2.45.1",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-typescript": "^1.0.1",
    "size-limit": "^4.10.2",
    "ts-jest": "^26.5.4",
    "ts-node": "^9.1.1",
    "tslib": "^2.2.0",
    "typescript": "^4.2.4"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn lint && yarn typecheck",
    "test": "yarn jest",
    "test:size": "yarn build && size-limit",
    "typecheck": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build"
   },
   "gitHead": "6d5ad9f89455c0acc01af6bb313b39600023c9bb",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@5.2.1",
   "_nodeVersion": "14.15.0",
   "_npmVersion": "6.14.8",
   "dist": {
    "integrity": "sha512-zYiwtZUcYyXKo/np96AGZAckk+FWWsUdJ3cHGGmld7+AhvcWmQyGCYUh1hc4Q/pkOhb65dQR/pqCyK0cOaHz4Q==",
    "shasum": "8337aa3c4335581839ec01c3d594090cebe8f00e",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-5.2.1.tgz",
    "fileCount": 13,
    "unpackedSize": 21770,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgg3wwCRA9TVsSAnZWagAARhwP/3tXOtE6wT9PbDFcqtEm\nFRyH6g8qF1nn6tts6hysFjwmoum7GIcVx7sIXvFbzitMyG7PpuUE0nL6oamM\n2N58SYoJs4c3ojWQwkURoiWW3+NuK1Q16YwZabM30foa7KpIaJLaJ4S71CZr\nLlOeYBYcKKcYG1tvaM8zjy1t1vh6V+bsiOWn7HPY8AojVl5KQsyPZD97R4ni\nBZDLJkm47ea0RpXfQUlGWMIP6tdVrzNnGSzrGXapQsUwbShAHGO7fcUYE3LC\nzwFGgHsw5+Lw5/ENLVJ7Fma0xqAiJI9w1j6+seXqJv3kTbNQEbtAyUZ87HQe\nAbmO1/gA74g/LQp/iI8QZ1Ui6Wvz7zkMn+J2UK/EZ8U6n8tqLhDRGttlOIQq\naBkMF0ZQDE1vvfKBsDsCoTF04JlgZPqC+PjHCCHjBefkKS1pNBnq6+GDeO4U\nMH0YsaaGr6hHTOEHRKk8Xf/XA3VVycpzicZSqIOCcfxCdLWFxwOMNOg2eukB\nXtqOo12gcXaupUodeVpnpulmBVZa1lqrcAdJ9MZ/GDmmvpheEhIsora4WPBI\nYAPhh4MpyXrgykOaxPD/enGniEtdJio5PvKkey7dWQnWFzGNJfY+suuBJl+n\nqSNXvRWY6yAZSMjoJ4r3VtiVcNVGk6TaC6BKpAj9ki/BPCat1qSTuC6CkAHn\nk28R\r\n=Atmf\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEYCIQDQXncWaVmSIb/D1pz9Z7nSafV8hUe4bl76NR/aGRNI9AIhAMyc14o7A4N/IFZeB7DDfjUDeqiP7K2yONiHg2B22Wy4"
     }
    ]
   },
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.2.1_1619229743608_0.10378173501947363"
   },
   "_hasShrinkwrap": false
  },
  "6.0.0-beta.1": {
   "name": "memoize-one",
   "version": "6.0.0-beta.1",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "size-limit": [
    {
     "path": "dist/memoize-one.min.js",
     "limit": "234B"
    },
    {
     "path": "dist/memoize-one.js",
     "limit": "234B"
    },
    {
     "path": "dist/memoize-one.cjs.js",
     "limit": "230B"
    },
    {
     "path": "dist/memoize-one.esm.js",
     "limit": "246B"
    }
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@size-limit/preset-small-lib": "^5.0.4",
    "@types/benchmark": "^2.1.1",
    "@types/jest": "^27.0.2",
    "@types/lodash.isequal": "^4.5.5",
    "@types/lodash.memoize": "^4.1.6",
    "@types/node": "^16.10.1",
    "@typescript-eslint/eslint-plugin": "^4.31.2",
    "@typescript-eslint/parser": "^4.31.2",
    "benchmark": "^2.1.4",
    "cli-table": "^0.3.6",
    "cross-env": "^7.0.3",
    "eslint": "7.32.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-jest": "^24.4.2",
    "eslint-plugin-prettier": "^4.0.0",
    "expect-type": "^0.12.0",
    "fast-memoize": "^2.5.2",
    "jest": "^27.2.2",
    "lodash.isequal": "^4.5.0",
    "lodash.memoize": "^4.1.2",
    "mem": "^9.0.1",
    "memoizee": "^0.4.15",
    "moize": "^6.1.0",
    "nanocolors": "^0.2.9",
    "ora": "^6.0.1",
    "prettier": "2.4.1",
    "rimraf": "3.0.2",
    "rollup": "^2.57.0",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-typescript": "^1.0.1",
    "size-limit": "^5.0.4",
    "ts-jest": "^27.0.5",
    "ts-node": "^10.2.1",
    "tslib": "^2.3.1",
    "typescript": "^4.4.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn prettier:check && yarn eslint:check && yarn typescript:check",
    "test": "yarn jest",
    "test:size": "yarn build && yarn size-limit",
    "typescript:check": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "eslint:check": "eslint $npm_package_config_prettier_target",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "yarn rimraf dist",
    "build:dist": "yarn rollup -c",
    "build:typescript": "yarn tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "yarn ts-node ./benchmarks/shallow-equal.ts",
    "perf:library-comparison": "yarn build && node ./benchmarks/library-comparison.js",
    "prepublishOnly": "yarn build"
   },
   "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n> Also [async version](https://github.com/microlinkhq/async-memoize-one).\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n![types](https://img.shields.io/badge/types-typescript%20%7C%20flow-blueviolet)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on, which can be prone to memory leaks. A function memoized with `memoize-one` simply remembers the last arguments, and if the memoized function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n```js\n// memoize-one uses the default import\nimport memoizeOne from 'memoize-one';\n\nfunction add(a, b) {\n  return a + b;\n}\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2);\n// add function: is called\n// [new value returned: 3]\n\nmemoizedAdd(1, 2);\n// add function: not called\n// [cached result is returned: 3]\n\nmemoizedAdd(2, 3);\n// add function: is called\n// [new value returned: 5]\n\nmemoizedAdd(2, 3);\n// add function: not called\n// [cached result is returned: 5]\n\nmemoizedAdd(1, 2);\n// add function: is called\n// [new value returned: 3]\n// 👇\n// While the result of `add(1, 2)` was previously cached\n// `(1, 2)` was not the *latest* arguments (the last call was `(2, 3)`)\n// so the previous cached result of `(1, 3)` was lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Function argument equality\n\nBy default, we apply our own _fast_ and _relatively naive_ equality function to determine whether the arguments provided to your function are equal. You can see the full code here: [are-inputs-equal.ts](https://github.com/alexreardon/memoize-one/blob/master/src/are-inputs-equal.ts).\n\n(By default) function arguments are considered equal if:\n\n1. there is same amount of arguments\n2. each new argument has strict equality (`===`) with the previous argument\n3. **[special case]** if two arguments are not `===` and they are both `NaN` then the two arguments are treated as equal\n\nWhat this looks like in practice:\n\n```js\nimport memoizeOne from 'memoize-one';\n\n// add all numbers provided to the function\nconst add = (...args = []) =>\n  args.reduce((current, value) => {\n    return current + value;\n  }, 0);\nconst memoizedAdd = memoizeOne(add);\n```\n\n> 1. there is same amount of arguments\n\n```js\nmemoizedAdd(1, 2);\n// the amount of arguments has changed, so underlying add function is called\nmemoizedAdd(1, 2, 3);\n```\n\n> 2. new arguments have strict equality (`===`) with the previous argument\n\n```js\nmemoizedAdd(1, 2);\n// each argument is `===` to the last argument, so cache is used\nmemoizedAdd(1, 2);\n// second argument has changed, so add function is called again\nmemoizedAdd(1, 3);\n// the first value is not `===` to the previous first value (1 !== 3)\n// so add function is called again\nmemoizedAdd(3, 1);\n```\n\n> 3. **[special case]** if the arguments are not `===` and they are both `NaN` then the argument is treated as equal\n\n```js\nmemoizedAdd(NaN);\n// Even though NaN !== NaN these arguments are\n// treated as equal as they are both `NaN`\nmemoizedAdd(NaN);\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\n**Tip**: A custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a [dequal](https://github.com/lukeed/dequal) deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = (x) => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - different object reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\nThe equality function needs to conform to the `EqualityFn` `type`:\n\n```ts\n// TFunc is the function being memoized\ntype EqualityFn<TFunc extends (...args: any[]) => any> = (\n  newArgs: Parameters<TFunc>,\n  lastArgs: Parameters<TFunc>,\n) => boolean;\n\n// You can import this type\nimport type { EqualityFn } from 'memoize-one';\n```\n\nThe `EqualityFn` type allows you to create equality functions that are extremely typesafe. You are welcome to provide your own less type safe equality functions.\n\nHere are some examples of equality functions which are ordered by most type safe, to least type safe:\n\n<details>\n  <summary>Example equality function types</summary>\n  <p>\n\n```ts\n// the function we are going to memoize\nfunction add(first: number, second: number): number {\n  return first + second;\n}\n\n// Some options for our equality function\n// ↑ stronger types\n// ↓ weaker types\n\n// ✅ exact parameters of `add`\n{\n  const isEqual = function (first: Parameters<typeof add>, second: Parameters<typeof add>) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ tuple of the correct types\n{\n  const isEqual = function (first: [number, number], second: [number, number]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ tuple of incorrect types\n{\n  const isEqual = function (first: [number, string], second: [number, number]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ array of the correct types\n{\n  const isEqual = function (first: number[], second: number[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ array of incorrect types\n{\n  const isEqual = function (first: string[], second: number[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ tuple of 'unknown'\n{\n  const isEqual = function (first: [unknown, unknown], second: [unknown, unknown]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ tuple of 'unknown' of incorrect length\n{\n  const isEqual = function (first: [unknown, unknown, unknown], second: [unknown, unknown]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ array of 'unknown'\n{\n  const isEqual = function (first: unknown[], second: unknown[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ spread of 'unknown'\n{\n  const isEqual = function (...first: unknown[]) {\n    return !!first;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ tuple of 'any'\n{\n  const isEqual = function (first: [any, any], second: [any, any]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ tuple of 'any' or incorrect size\n{\n  const isEqual = function (first: [any, any, any], second: [any, any]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ array of 'any'\n{\n  const isEqual = function (first: any[], second: any[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ two arguments of type any\n{\n  const isEqual = function (first: any, second: any) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ a single argument of type any\n{\n  const isEqual = function (first: any) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ spread of any type\n{\n  const isEqual = function (...first: any[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n```\n\n  </p>\n</details>\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## Clearing the memoization cache\n\nA `.clear()` property is added to memoized functions to allow you to clear it's memoization cache.\n\nThis is helpful if you want to:\n\n- Clear memory\n- Cause the underlying function to be called again without having to change arguments\n\n```ts\nimport memoizeOne from 'memoize-one';\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\nconst memoizedAdd = memoizeOne(add);\n\n// first call - not memoized\nconst first = memoizedAdd(1, 2);\n\n// second call - cache hit (underlying function not called)\nconst second = memoizedAdd(1, 2);\n\n// 👋 clearing memoization cache\nmemoizedAdd.clear();\n\n// third call - not memoized (cache was cleared)\nconst third = memoizedAdd(1, 2);\n```\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Function properties\n\nFunctions memoized with `memoize-one` do not preserve any properties on the function object.\n\n> This behaviour correctly reflected in the TypeScript types\n\n```ts\nimport memoizeOne from 'memoize-one';\n\nfunction add(a, b) {\n  return a + b;\n}\nadd.hello = 'hi';\n\nconsole.log(typeof add.hello); // string\n\nconst memoized = memoizeOne(add);\n\n// hello property on the `add` was not preserved\nconsole.log(typeof memoized.hello); // undefined\n```\n\nIf you feel strongly that `memoize-one` _should_ preserve function properties, please raise an issue. This decision was made in order to keep `memoize-one` as light as possible.\n\nFor _now_, the `.length` property of a function is not preserved on the memoized function\n\n```ts\nimport memoizeOne from 'memoize-one';\n\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add.length); // 2\n\nconst memoized = memoizeOne(add);\n\nconsole.log(memoized.length); // 0\n```\n\nThere is no (great) way to correctly set the `.length` property of the memoized function while also supporting ie11. Once we [remove ie11 support](https://github.com/alexreardon/memoize-one/issues/125) then we will set the `.length` property of the memoized function to match the original function\n\n[→ discussion](https://github.com/alexreardon/memoize-one/pull/124).\n\n## Performance 🚀\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. There is variability between runs. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n<details>\n  <summary>Expand for results</summary>\n  <p>\n\nnode version `14.15.0`\n\nYou can run this test in the repo by:\n\n1. Add `\"type\": \"module\"` to the `package.json` (why is things so hard)\n2. Run `yarn perf:library-comparison`\n\n**no arguments**\n\n| Position | Library                       | Operations per second |\n| -------- | ----------------------------- | --------------------- |\n| 1        | memoize-one                   | 80,657,220            |\n| 2        | moize                         | 64,951,103            |\n| 3        | memoizee                      | 32,066,963            |\n| 4        | lodash.memoize                | 30,387,390            |\n| 5        | mem (JSON.stringify strategy) | 3,894,072             |\n| 6        | no memoization                | 506                   |\n| 7        | fast-memoize                  | 505                   |\n\n**single primitive argument**\n\n| Position | Library                       | Operations per second |\n| -------- | ----------------------------- | --------------------- |\n| 1        | fast-memoize                  | 43,922,254            |\n| 2        | lodash.memoize                | 26,652,387            |\n| 3        | moize                         | 25,654,686            |\n| 4        | memoize-one                   | 25,059,187            |\n| 5        | memoizee                      | 19,096,104            |\n| 6        | mem (JSON.stringify strategy) | 3,448,488             |\n| 7        | no memoization                | 503                   |\n\n**single complex argument**\n\n| Position | Library                       | Operations per second |\n| -------- | ----------------------------- | --------------------- |\n| 1        | moize                         | 31,199,164            |\n| 2        | lodash.memoize                | 28,712,860            |\n| 3        | memoize-one                   | 23,896,851            |\n| 4        | memoizee                      | 19,010,167            |\n| 5        | mem (JSON.stringify strategy) | 2,045,973             |\n| 6        | fast-memoize                  | 1,519,294             |\n| 7        | no memoization                | 504                   |\n\n**multiple primitive arguments**\n\n| Position | Library                       | Operations per second |\n| -------- | ----------------------------- | --------------------- |\n| 1        | moize                         | 21,039,928            |\n| 2        | lodash.memoize                | 20,248,759            |\n| 3        | memoize-one                   | 16,600,643            |\n| 4        | memoizee                      | 9,071,600             |\n| 5        | mem (JSON.stringify strategy) | 2,990,592             |\n| 6        | fast-memoize                  | 1,156,061             |\n| 7        | no memoization                | 506                   |\n\n**multiple complex arguments**\n\n| Position | Library                       | Operations per second |\n| -------- | ----------------------------- | --------------------- |\n| 1        | lodash.memoize                | 22,803,155            |\n| 2        | moize                         | 19,773,333            |\n| 3        | memoize-one                   | 16,341,253            |\n| 4        | memoizee                      | 9,030,317             |\n| 5        | mem (JSON.stringify strategy) | 806,040               |\n| 6        | fast-memoize                  | 633,057               |\n| 7        | no memoization                | 504                   |\n\n**multiple complex arguments (spreading arguments)**\n\n| Position | Library                       | Operations per second |\n| -------- | ----------------------------- | --------------------- |\n| 1        | lodash.memoize                | 24,089,032            |\n| 2        | moize                         | 21,574,025            |\n| 3        | memoizee                      | 19,810,230            |\n| 4        | memoize-one                   | 16,201,443            |\n| 5        | mem (JSON.stringify strategy) | 861,279               |\n| 6        | fast-memoize                  | 656,715               |\n| 7        | no memoization                | 504                   |\n\n  </p>\n</details>\n\n## Code health 👍\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch1.md)\n- Written in `Typescript`\n- Correct typing for `Typescript` and `flow` type systems\n- No dependencies\n",
   "readmeFilename": "README.md",
   "gitHead": "2a2c84b4a93a556711b1ead47cfbb34b06c448b3",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@6.0.0-beta.1",
   "_nodeVersion": "14.17.6",
   "_npmVersion": "6.14.15",
   "dist": {
    "integrity": "sha512-Ru+EFMmPRAk+3XUb6XxWF8gjM63R1TohA+BSyn/WaFzN9owjL3NAX8PFfocGAz0qFOeXwW4bZ4SK32zN16v9Ag==",
    "shasum": "5b0e23c03f804dcb1556546cf8785c11213c1c9f",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-6.0.0-beta.1.tgz",
    "fileCount": 13,
    "unpackedSize": 32957,
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEQCIC6yX2ir0YHbP1gigTIrHTVY504DYhNZuclhaYnA6WwdAiAOX+kC0uUiGdHZX4kyPDL13uBwKDyOo4a9sXPvQD+ETw=="
     }
    ]
   },
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_6.0.0-beta.1_1634275605421_0.07515083282204915"
   },
   "_hasShrinkwrap": false
  },
  "6.0.0": {
   "name": "memoize-one",
   "version": "6.0.0",
   "description": "A memoization library which only remembers the latest invocation",
   "main": "dist/memoize-one.cjs.js",
   "types": "dist/memoize-one.d.ts",
   "module": "dist/memoize-one.esm.js",
   "sideEffects": false,
   "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
   },
   "license": "MIT",
   "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
   },
   "size-limit": [
    {
     "path": "dist/memoize-one.min.js",
     "limit": "234B"
    },
    {
     "path": "dist/memoize-one.js",
     "limit": "234B"
    },
    {
     "path": "dist/memoize-one.cjs.js",
     "limit": "230B"
    },
    {
     "path": "dist/memoize-one.esm.js",
     "limit": "246B"
    }
   ],
   "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
   ],
   "dependencies": {},
   "devDependencies": {
    "@size-limit/preset-small-lib": "^5.0.4",
    "@types/benchmark": "^2.1.1",
    "@types/jest": "^27.0.2",
    "@types/lodash.isequal": "^4.5.5",
    "@types/lodash.memoize": "^4.1.6",
    "@types/node": "^16.10.1",
    "@typescript-eslint/eslint-plugin": "^4.31.2",
    "@typescript-eslint/parser": "^4.31.2",
    "benchmark": "^2.1.4",
    "cross-env": "^7.0.3",
    "eslint": "7.32.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-jest": "^24.4.2",
    "eslint-plugin-prettier": "^4.0.0",
    "expect-type": "^0.12.0",
    "fast-memoize": "^2.5.2",
    "jest": "^27.2.2",
    "lodash.isequal": "^4.5.0",
    "lodash.memoize": "^4.1.2",
    "markdown-table": "^3.0.1",
    "mem": "^9.0.1",
    "memoizee": "^0.4.15",
    "moize": "^6.1.0",
    "nanocolors": "^0.2.9",
    "ora": "^6.0.1",
    "prettier": "2.4.1",
    "rimraf": "3.0.2",
    "rollup": "^2.57.0",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-typescript": "^1.0.1",
    "size-limit": "^5.0.4",
    "ts-jest": "^27.0.5",
    "ts-node": "^10.2.1",
    "tslib": "^2.3.1",
    "typescript": "^4.4.3"
   },
   "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
   },
   "scripts": {
    "validate": "yarn prettier:check && yarn eslint:check && yarn typescript:check",
    "test": "yarn jest",
    "test:size": "yarn build && yarn size-limit",
    "typescript:check": "yarn tsc --noEmit",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "eslint:check": "eslint $npm_package_config_prettier_target",
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "yarn rimraf dist",
    "build:dist": "yarn rollup -c",
    "build:typescript": "yarn tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "perf": "yarn ts-node ./benchmarks/shallow-equal.ts",
    "perf:library-comparison": "yarn build && node ./benchmarks/library-comparison.js",
    "prepublishOnly": "yarn build"
   },
   "gitHead": "d5acc5343970ee4b615d4d1d5da85c2436752a79",
   "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
   },
   "homepage": "https://github.com/alexreardon/memoize-one#readme",
   "_id": "memoize-one@6.0.0",
   "_nodeVersion": "14.15.0",
   "_npmVersion": "7.11.1",
   "dist": {
    "integrity": "sha512-rkpe71W0N0c0Xz6QD0eJETuWAJGnJ9afsl1srmwPrI+yBCkge5EycXXbYRyvL29zZVUWQCY7InPRCv3GDXuZNw==",
    "shasum": "b2591b871ed82948aee4727dc6abceeeac8c1045",
    "tarball": "http://localhost:3000/memoize-one/-/memoize-one-6.0.0.tgz",
    "fileCount": 13,
    "unpackedSize": 35613,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2zCJCRA9TVsSAnZWagAACk0P/ia78vT8IDYM2BBfLcUB\nbw1IkgdoMI3TROOTgmje7feVefsZiFkD9AzlyzI6kaoBbu+9jpbHD3z0K/Mv\nH0LZsnptmYAwd5mjKDkd4GFX9HReF0YbcEyAvH5N24zWe/IJDUHeleOrA393\nLaLFsvPVqTT7M9ow2qC1RaaQsh98KyI9H1FU8qrqTemHM77Q/YBAWO38VskG\nh0QhbBGKXIZIIpK4cQaEijAwJ91WHad0AiNvgaTk4iVrMpiz5Eg+nYwwRc2s\nX22u9y8r54YPm45WGBEVOmLsB4rUCf1xZ7CFXmaEyTVEk1j5C08VgSt3qYWc\n4RbN5J3+kQcA44NjJGOs7GMa+LP8CeLkjDgcTlj8KMOZSz+qHgquC6Kfb4XM\n5q4D1nXDkU4TlNrRDLrE5m7IX6JoqVhBZTty/ABLGOyNi1zMnA6iUOhiLFgl\nBPnpw06s9woLMiIT3xkWtn5s2ap7YdlbW0ZpxOvix4vF/97Gse9GW19ugsh3\nfXkKS0F17Qzuqa0ImCo2PBRXbI7HgbTKDPbfvh91bR5ml8YQ1RqOt++fgLjq\nvLT9dUmTP5UlgOl3XrJ8DuBK6mk99i8u6fq+y9hYMXLHSRZLIOWWRxAk9SxW\nZL9SWq3yKFBlEsOImvt9Gimae6Ewvgn2htqSUH924hG2L5FnrJsnYJyvdIUW\nWmw0\r\n=htyg\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
     {
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
      "sig": "MEYCIQCY3BAidIyEnbYBFae2QjVlkH53IXdk62A7SouKgVllegIhAPIenywtn+ybDPXjln+cS6nCgMQlXKoYaFy4bGbe135C"
     }
    ]
   },
   "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
   },
   "directories": {},
   "maintainers": [
    {
     "name": "alexreardon",
     "email": "alexreardon@gmail.com"
    }
   ],
   "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_6.0.0_1634697182254_0.34471216509637514"
   },
   "_hasShrinkwrap": false
  }
 },
 "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n![types](https://img.shields.io/badge/types-typescript%20%7C%20flow-blueviolet)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on, which can be prone to memory leaks. A function memoized with `memoize-one` simply remembers the last arguments, and if the memoized function is next called with the same arguments then it returns the previous result.\n\n> For working with promises, [@Kikobeats](https://github.com/Kikobeats) has built [async-memoize-one](https://github.com/microlinkhq/async-memoize-one).\n\n## Usage\n\n```js\n// memoize-one uses the default import\nimport memoizeOne from 'memoize-one';\n\nfunction add(a, b) {\n  return a + b;\n}\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2);\n// add function: is called\n// [new value returned: 3]\n\nmemoizedAdd(1, 2);\n// add function: not called\n// [cached result is returned: 3]\n\nmemoizedAdd(2, 3);\n// add function: is called\n// [new value returned: 5]\n\nmemoizedAdd(2, 3);\n// add function: not called\n// [cached result is returned: 5]\n\nmemoizedAdd(1, 2);\n// add function: is called\n// [new value returned: 3]\n// 👇\n// While the result of `add(1, 2)` was previously cached\n// `(1, 2)` was not the *latest* arguments (the last call was `(2, 3)`)\n// so the previous cached result of `(1, 3)` was lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Function argument equality\n\nBy default, we apply our own _fast_ and _relatively naive_ equality function to determine whether the arguments provided to your function are equal. You can see the full code here: [are-inputs-equal.ts](https://github.com/alexreardon/memoize-one/blob/master/src/are-inputs-equal.ts).\n\n(By default) function arguments are considered equal if:\n\n1. there is same amount of arguments\n2. each new argument has strict equality (`===`) with the previous argument\n3. **[special case]** if two arguments are not `===` and they are both `NaN` then the two arguments are treated as equal\n\nWhat this looks like in practice:\n\n```js\nimport memoizeOne from 'memoize-one';\n\n// add all numbers provided to the function\nconst add = (...args = []) =>\n  args.reduce((current, value) => {\n    return current + value;\n  }, 0);\nconst memoizedAdd = memoizeOne(add);\n```\n\n> 1. there is same amount of arguments\n\n```js\nmemoizedAdd(1, 2);\n// the amount of arguments has changed, so underlying add function is called\nmemoizedAdd(1, 2, 3);\n```\n\n> 2. new arguments have strict equality (`===`) with the previous argument\n\n```js\nmemoizedAdd(1, 2);\n// each argument is `===` to the last argument, so cache is used\nmemoizedAdd(1, 2);\n// second argument has changed, so add function is called again\nmemoizedAdd(1, 3);\n// the first value is not `===` to the previous first value (1 !== 3)\n// so add function is called again\nmemoizedAdd(3, 1);\n```\n\n> 3. **[special case]** if the arguments are not `===` and they are both `NaN` then the argument is treated as equal\n\n```js\nmemoizedAdd(NaN);\n// Even though NaN !== NaN these arguments are\n// treated as equal as they are both `NaN`\nmemoizedAdd(NaN);\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\n**Tip**: A custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a [lodash.isEqual](https://lodash.com/docs/4.17.15#isEqual) deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = (x) => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - different object reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\nThe equality function needs to conform to the `EqualityFn` `type`:\n\n```ts\n// TFunc is the function being memoized\ntype EqualityFn<TFunc extends (...args: any[]) => any> = (\n  newArgs: Parameters<TFunc>,\n  lastArgs: Parameters<TFunc>,\n) => boolean;\n\n// You can import this type\nimport type { EqualityFn } from 'memoize-one';\n```\n\nThe `EqualityFn` type allows you to create equality functions that are extremely typesafe. You are welcome to provide your own less type safe equality functions.\n\nHere are some examples of equality functions which are ordered by most type safe, to least type safe:\n\n<details>\n  <summary>Example equality function types</summary>\n  <p>\n\n```ts\n// the function we are going to memoize\nfunction add(first: number, second: number): number {\n  return first + second;\n}\n\n// Some options for our equality function\n// ↑ stronger types\n// ↓ weaker types\n\n// ✅ exact parameters of `add`\n{\n  const isEqual = function (first: Parameters<typeof add>, second: Parameters<typeof add>) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ tuple of the correct types\n{\n  const isEqual = function (first: [number, number], second: [number, number]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ tuple of incorrect types\n{\n  const isEqual = function (first: [number, string], second: [number, number]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ array of the correct types\n{\n  const isEqual = function (first: number[], second: number[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ array of incorrect types\n{\n  const isEqual = function (first: string[], second: number[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ tuple of 'unknown'\n{\n  const isEqual = function (first: [unknown, unknown], second: [unknown, unknown]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ tuple of 'unknown' of incorrect length\n{\n  const isEqual = function (first: [unknown, unknown, unknown], second: [unknown, unknown]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ array of 'unknown'\n{\n  const isEqual = function (first: unknown[], second: unknown[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ spread of 'unknown'\n{\n  const isEqual = function (...first: unknown[]) {\n    return !!first;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ tuple of 'any'\n{\n  const isEqual = function (first: [any, any], second: [any, any]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ❌ tuple of 'any' or incorrect size\n{\n  const isEqual = function (first: [any, any, any], second: [any, any]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().not.toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ array of 'any'\n{\n  const isEqual = function (first: any[], second: any[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ two arguments of type any\n{\n  const isEqual = function (first: any, second: any) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ a single argument of type any\n{\n  const isEqual = function (first: any) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n\n// ✅ spread of any type\n{\n  const isEqual = function (...first: any[]) {\n    return true;\n  };\n  expectTypeOf<typeof isEqual>().toMatchTypeOf<EqualityFn<typeof add>>();\n}\n```\n\n  </p>\n</details>\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## Clearing the memoization cache\n\nA `.clear()` property is added to memoized functions to allow you to clear it's memoization cache.\n\nThis is helpful if you want to:\n\n- Release memory\n- Allow the underlying function to be called again without having to change arguments\n\n```ts\nimport memoizeOne from 'memoize-one';\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\nconst memoizedAdd = memoizeOne(add);\n\n// first call - not memoized\nconst first = memoizedAdd(1, 2);\n\n// second call - cache hit (underlying function not called)\nconst second = memoizedAdd(1, 2);\n\n// 👋 clearing memoization cache\nmemoizedAdd.clear();\n\n// third call - not memoized (cache was cleared)\nconst third = memoizedAdd(1, 2);\n```\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Function properties\n\nFunctions memoized with `memoize-one` do not preserve any properties on the function object.\n\n> This behaviour correctly reflected in the TypeScript types\n\n```ts\nimport memoizeOne from 'memoize-one';\n\nfunction add(a, b) {\n  return a + b;\n}\nadd.hello = 'hi';\n\nconsole.log(typeof add.hello); // string\n\nconst memoized = memoizeOne(add);\n\n// hello property on the `add` was not preserved\nconsole.log(typeof memoized.hello); // undefined\n```\n\nIf you feel strongly that `memoize-one` _should_ preserve function properties, please raise an issue. This decision was made in order to keep `memoize-one` as light as possible.\n\nFor _now_, the `.length` property of a function is not preserved on the memoized function\n\n```ts\nimport memoizeOne from 'memoize-one';\n\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add.length); // 2\n\nconst memoized = memoizeOne(add);\n\nconsole.log(memoized.length); // 0\n```\n\nThere is no (great) way to correctly set the `.length` property of the memoized function while also supporting ie11. Once we [remove ie11 support](https://github.com/alexreardon/memoize-one/issues/125) then we will set the `.length` property of the memoized function to match the original function\n\n[→ discussion](https://github.com/alexreardon/memoize-one/pull/124).\n\n## Memoized function `type`\n\nThe resulting function you get back from `memoize-one` has *almost* the same `type` as the function that you are memoizing\n\n```ts\ndeclare type MemoizedFn<TFunc extends (this: any, ...args: any[]) => any> = {\n  clear: () => void;\n  (this: ThisParameterType<TFunc>, ...args: Parameters<TFunc>): ReturnType<TFunc>;\n};\n```\n\n- the same call signature as the function being memoized\n- a `.clear()` function property added\n- other function object properties on `TFunc` as not carried over\n\nYou are welcome to use the `MemoizedFn` generic directly from `memoize-one` if you like:\n\n```ts\nimport memoize, { MemoizedFn } from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\nimport { expectTypeOf } from 'expect-type';\n\n// Takes any function: TFunc, and returns a Memoized<TFunc>\nfunction withDeepEqual<TFunc extends (...args: any[]) => any>(fn: TFunc): MemoizedFn<TFunc> {\n  return memoize(fn, isDeepEqual);\n}\n\nfunction add(first: number, second: number): number {\n  return first + second;\n}\n\nconst memoized = withDeepEqual(add);\n\nexpectTypeOf<typeof memoized>().toEqualTypeOf<MemoizedFn<typeof add>>();\n```\n\nIn this specific example, this type would have been correctly inferred too\n\n```ts\nimport memoize, { MemoizedFn } from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\nimport { expectTypeOf } from 'expect-type';\n\n// return type of MemoizedFn<TFunc> is inferred\nfunction withDeepEqual<TFunc extends (...args: any[]) => any>(fn: TFunc) {\n  return memoize(fn, isDeepEqual);\n}\n\nfunction add(first: number, second: number): number {\n  return first + second;\n}\n\nconst memoized = withDeepEqual(add);\n\n// type test still passes\nexpectTypeOf<typeof memoized>().toEqualTypeOf<MemoizedFn<typeof add>>();\n```\n\n## Performance 🚀\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. There is variability between runs. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n<details>\n  <summary>Expand for results</summary>\n  <p>\n\nnode version `16.11.1`\n\nYou can run this test in the repo by:\n\n1. Add `\"type\": \"module\"` to the `package.json` (why is things so hard)\n2. Run `yarn perf:library-comparison`\n\n**no arguments**\n\n| Position | Library                                      | Operations per second |\n| -------- | -------------------------------------------- | --------------------- |\n| 1        | memoize-one                                  | 80,112,981            |\n| 2        | moize                                        | 72,885,631            |\n| 3        | memoizee                                     | 35,550,009            |\n| 4        | mem (JSON.stringify strategy)                | 4,610,532             |\n| 5        | lodash.memoize (JSON.stringify key resolver) | 3,708,945             |\n| 6        | no memoization                               | 505                   |\n| 7        | fast-memoize                                 | 504                   |\n\n**single primitive argument**\n\n| Position | Library                                      | Operations per second |\n| -------- | -------------------------------------------- | --------------------- |\n| 1        | fast-memoize                                 | 45,482,711            |\n| 2        | moize                                        | 34,810,659            |\n| 3        | memoize-one                                  | 29,030,828            |\n| 4        | memoizee                                     | 23,467,065            |\n| 5        | mem (JSON.stringify strategy)                | 3,985,223             |\n| 6        | lodash.memoize (JSON.stringify key resolver) | 3,369,297             |\n| 7        | no memoization                               | 507                   |\n\n**single complex argument**\n\n| Position | Library                                      | Operations per second |\n| -------- | -------------------------------------------- | --------------------- |\n| 1        | moize                                        | 27,660,856            |\n| 2        | memoize-one                                  | 22,407,916            |\n| 3        | memoizee                                     | 19,546,835            |\n| 4        | mem (JSON.stringify strategy)                | 2,068,038             |\n| 5        | lodash.memoize (JSON.stringify key resolver) | 1,911,335             |\n| 6        | fast-memoize                                 | 1,633,855             |\n| 7        | no memoization                               | 504                   |\n\n**multiple primitive arguments**\n\n| Position | Library                                      | Operations per second |\n| -------- | -------------------------------------------- | --------------------- |\n| 1        | moize                                        | 22,366,497            |\n| 2        | memoize-one                                  | 17,241,995            |\n| 3        | memoizee                                     | 9,789,442             |\n| 4        | mem (JSON.stringify strategy)                | 3,065,328             |\n| 5        | lodash.memoize (JSON.stringify key resolver) | 2,663,599             |\n| 6        | fast-memoize                                 | 1,219,548             |\n| 7        | no memoization                               | 504                   |\n\n**multiple complex arguments**\n\n| Position | Library                                      | Operations per second |\n| -------- | -------------------------------------------- | --------------------- |\n| 1        | moize                                        | 21,788,081            |\n| 2        | memoize-one                                  | 17,321,248            |\n| 3        | memoizee                                     | 9,595,420             |\n| 4        | lodash.memoize (JSON.stringify key resolver) | 873,283               |\n| 5        | mem (JSON.stringify strategy)                | 850,779               |\n| 6        | fast-memoize                                 | 687,863               |\n| 7        | no memoization                               | 504                   |\n\n**multiple complex arguments (spreading arguments)**\n\n| Position | Library                                      | Operations per second |\n| -------- | -------------------------------------------- | --------------------- |\n| 1        | moize                                        | 21,701,537            |\n| 2        | memoizee                                     | 19,463,942            |\n| 3        | memoize-one                                  | 17,027,544            |\n| 4        | lodash.memoize (JSON.stringify key resolver) | 887,816               |\n| 5        | mem (JSON.stringify strategy)                | 849,244               |\n| 6        | fast-memoize                                 | 691,512               |\n| 7        | no memoization                               | 504                   |\n\n  </p>\n</details>\n\n## Code health 👍\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch1.md)\n- Written in `Typescript`\n- Correct typing for `Typescript` and `flow` type systems\n- No dependencies\n",
 "maintainers": [
  {
   "name": "alexreardon",
   "email": "alexreardon@gmail.com"
  }
 ],
 "time": {
  "modified": "2023-07-22T20:57:07.268Z",
  "created": "2017-02-06T07:58:39.215Z",
  "0.0.1-beta": "2017-02-06T07:58:39.215Z",
  "0.0.2-beta": "2017-02-06T08:51:39.181Z",
  "1.0.0-rc.1": "2017-02-06T22:32:39.852Z",
  "1.0.0": "2017-02-08T22:02:46.011Z",
  "1.0.1": "2017-02-10T00:33:11.114Z",
  "1.0.2": "2017-02-14T00:21:47.997Z",
  "2.0.0": "2017-05-05T06:13:04.755Z",
  "2.0.1": "2017-05-05T14:53:20.381Z",
  "3.0.0": "2017-05-15T07:09:44.760Z",
  "3.0.1": "2017-05-27T10:03:38.832Z",
  "3.1.0": "2018-03-22T00:05:45.034Z",
  "3.1.1": "2018-03-22T08:10:23.672Z",
  "4.0.0": "2018-06-29T03:51:30.019Z",
  "4.0.1": "2018-08-31T01:42:24.701Z",
  "4.0.2": "2018-08-31T06:38:42.218Z",
  "4.0.3": "2018-11-07T02:15:06.018Z",
  "4.1.0": "2018-12-11T23:20:09.084Z",
  "5.0.0": "2018-12-17T04:12:34.765Z",
  "5.0.1": "2019-03-27T00:19:59.256Z",
  "5.0.2": "2019-03-27T22:25:33.961Z",
  "5.0.3": "2019-04-08T03:50:04.142Z",
  "5.0.4": "2019-04-08T04:48:18.959Z",
  "5.0.5": "2019-07-09T01:25:27.351Z",
  "5.1.0-beta.1": "2019-08-20T00:50:28.890Z",
  "5.1.0-beta.2": "2019-08-20T01:41:39.662Z",
  "5.1.0-beta.3": "2019-08-20T04:07:51.854Z",
  "5.1.0-beta.4": "2019-08-20T05:27:07.650Z",
  "5.1.0-beta.5": "2019-08-21T00:06:17.638Z",
  "5.1.0-beta.6": "2019-08-21T01:09:06.622Z",
  "5.1.0": "2019-08-21T01:37:33.154Z",
  "5.1.1": "2019-08-23T03:13:11.276Z",
  "5.2.0": "2021-04-22T21:28:53.956Z",
  "5.2.1": "2021-04-24T02:02:23.780Z",
  "6.0.0-beta.1": "2021-10-15T05:26:45.577Z",
  "6.0.0": "2021-10-20T02:33:02.439Z"
 },
 "repository": {
  "type": "git",
  "url": "git+https://github.com/alexreardon/memoize-one.git"
 },
 "author": {
  "name": "Alex Reardon",
  "email": "alexreardon@gmail.com"
 },
 "license": "MIT",
 "readmeFilename": "README.md",
 "keywords": [
  "memoize",
  "memoization",
  "cache",
  "performance"
 ],
 "users": {
  "binki": true,
  "liunian": true,
  "flumpus-dev": true
 },
 "homepage": "https://github.com/alexreardon/memoize-one#readme",
 "bugs": {
  "url": "https://github.com/alexreardon/memoize-one/issues"
 }
}