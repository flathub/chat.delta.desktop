{
 "_id": "chromium-pickle-js",
 "_rev": "11-6770e362cc533338b308aa25d314d15e",
 "name": "chromium-pickle-js",
 "dist-tags": {
  "latest": "0.2.0"
 },
 "versions": {
  "0.1.0": {
   "name": "chromium-pickle-js",
   "version": "0.1.0",
   "_id": "chromium-pickle-js@0.1.0",
   "maintainers": [
    {
     "name": "zcbenz",
     "email": "zcbenz@gmail.com"
    }
   ],
   "homepage": "https://github.com/atom/node-chromium-pickle-js",
   "bugs": {
    "url": "https://github.com/atom/node-chromium-pickle-js/issues"
   },
   "dist": {
    "shasum": "1d48b107d82126a2f3e211c2ea25f803ba551b21",
    "tarball": "http://localhost:3000/chromium-pickle-js/-/chromium-pickle-js-0.1.0.tgz",
    "integrity": "sha512-0Xkh0X11DQcRnvr9cO7PKX+MPS6CWgLhAaWznlgMaerE+ZmeV8o9hE6o+wlAxEMAVZpaYSUg4zKx1SDHN7gNNQ==",
    "signatures": [
     {
      "sig": "MEUCIQC0pP8ncxSkg0rIOPuxoiIODRFo/cb/vzlE/N2NxYMGbQIgZFqRt+64ySiQ6jX2nS2GrAroLDyJstfxDXbWse9oYEo=",
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
     }
    ]
   },
   "main": "./lib/exports.js",
   "_from": ".",
   "_shasum": "1d48b107d82126a2f3e211c2ea25f803ba551b21",
   "gitHead": "b015a1b2faf0ae56f08665794044d41f61e63f56",
   "scripts": {
    "prepublish": "grunt coffee"
   },
   "_npmUser": {
    "name": "zcbenz",
    "email": "zcbenz@gmail.com"
   },
   "licenses": [
    {
     "url": "http://github.com/atom/node-chromium-pickle-js/raw/master/LICENSE",
     "type": "MIT"
    }
   ],
   "repository": {
    "url": "https://github.com/atom/node-chromium-pickle-js.git",
    "type": "git"
   },
   "_npmVersion": "1.4.28",
   "description": "Binary value packing and unpacking",
   "directories": {},
   "dependencies": {},
   "devDependencies": {
    "grunt": "~0.4.1",
    "rimraf": "~2.1.4",
    "grunt-cli": "~0.1.7",
    "coffee-script": "~1.6.2",
    "grunt-coffeelint": "0.0.6",
    "grunt-contrib-coffee": "~0.6.6"
   }
  },
  "0.2.0": {
   "name": "chromium-pickle-js",
   "version": "0.2.0",
   "license": "MIT",
   "_id": "chromium-pickle-js@0.2.0",
   "maintainers": [
    {
     "name": "electron",
     "email": "electron@github.com"
    },
    {
     "name": "kevinsawicki",
     "email": "kevinsawicki@gmail.com"
    },
    {
     "name": "zcbenz",
     "email": "zcbenz@gmail.com"
    }
   ],
   "homepage": "https://github.com/electron/node-chromium-pickle-js#readme",
   "bugs": {
    "url": "https://github.com/electron/node-chromium-pickle-js/issues"
   },
   "dist": {
    "shasum": "04a106672c18b085ab774d983dfa3ea138f22205",
    "tarball": "http://localhost:3000/chromium-pickle-js/-/chromium-pickle-js-0.2.0.tgz",
    "integrity": "sha512-1R5Fho+jBq0DDydt+/vHWj5KJNJCKdARKOCwZUen84I5BreWoLqRLANH1U87eJy1tiASPtMnGqJJq0ZsLoRPOw==",
    "signatures": [
     {
      "sig": "MEUCIEaGoi5wNDIBwaWIMo2bB6O++ml8CJsNu4G4E45/dXRAAiEAzn5ROdBofP3+GBCy7LOoNKn1xW8BvZWqM1SO/fIwwXM=",
      "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
     }
    ]
   },
   "main": "./lib/exports.js",
   "_from": ".",
   "_shasum": "04a106672c18b085ab774d983dfa3ea138f22205",
   "gitHead": "72ecd4d52d8e676a595636e1ec9ba74060344137",
   "scripts": {
    "test": "mocha test && standard"
   },
   "_npmUser": {
    "name": "kevinsawicki",
    "email": "kevinsawicki@gmail.com"
   },
   "repository": {
    "url": "git+https://github.com/electron/node-chromium-pickle-js.git",
    "type": "git"
   },
   "_npmVersion": "2.15.9",
   "description": "Binary value packing and unpacking",
   "directories": {},
   "_nodeVersion": "4.5.0",
   "devDependencies": {
    "mocha": "^3.0.2",
    "standard": "^8.0.0"
   },
   "_npmOperationalInternal": {
    "tmp": "tmp/chromium-pickle-js-0.2.0.tgz_1472492576907_0.19674568716436625",
    "host": "packages-12-west.internal.npmjs.com"
   }
  }
 },
 "time": {
  "created": "2015-04-24T04:13:25.174Z",
  "modified": "2024-09-22T08:15:31.057Z",
  "0.1.0": "2015-04-24T04:13:25.174Z",
  "0.2.0": "2016-08-29T17:42:57.126Z"
 },
 "bugs": {
  "url": "https://github.com/electron/node-chromium-pickle-js/issues"
 },
 "license": "MIT",
 "homepage": "https://github.com/electron/node-chromium-pickle-js#readme",
 "repository": {
  "url": "git+https://github.com/electron/node-chromium-pickle-js.git",
  "type": "git"
 },
 "description": "Binary value packing and unpacking",
 "maintainers": [
  {
   "email": "marshallofsound+electronhqnpm@electronjs.org",
   "name": "electronhq"
  }
 ],
 "readme": "# chromium-pickle-js [![Build Status](https://travis-ci.org/electron/node-chromium-pickle-js.svg?branch=master)](https://travis-ci.org/electron/node-chromium-pickle-js)\n\nThis module ports Chromium's `Pickle` class to Node, see `Pickle`'s header for\nintroduction:\n\n> This class provides facilities for basic binary value packing and unpacking.\n>\n> The Pickle class supports appending primitive values (ints, strings, etc.)\n> to a pickle instance.  The Pickle instance grows its internal memory buffer\n> dynamically to hold the sequence of primitive values.   The internal memory\n> buffer is exposed as the \"data\" of the Pickle.  This \"data\" can be passed\n> to a Pickle object to initialize it for reading.\n>\n> When reading from a Pickle object, it is important for the consumer to know\n> what value types to read and in what order to read them as the Pickle does\n> not keep track of the type of data written to it.\n>\n> The Pickle's data has a header which contains the size of the Pickle's\n> payload.  It can optionally support additional space in the header.  That\n> space is controlled by the header_size parameter passed to the Pickle\n> constructor.\n\n## Install\n\n```bash\n$ npm install chromium-pickle-js\n```\n\n## Usage\n\n### createEmpty()\n\nReturns an empty `Pickle` object.\n\n### createFromBuffer(buffer)\n\n* `buffer` Buffer\n\nReturns a `Pickle` object that initialized from a `buffer`. The data is not\ncopied so you have to ensure the `buffer` lives when using the Pickle object,\nand you should never modify the Pickle object created this way.\n\n### Pickle.createIterator()\n\nReturns a `PickleIterator` object that can be used to read data from this\n`Pickle` object.\n\n### Pickle.toBuffer()\n\nReturns a `Buffer` object that contains this `Pickle` object's data.\n\n### Pickle.writeBool(value)\n\nWrites `value` to `Pickle` object as `bool`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeInt(value)\n\nWrites `value` to `Pickle` object as `int`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeUInt32(value)\n\nWrites `value` to `Pickle` object as `uint32`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeInt64(value)\n\nWrites `value` to `Pickle` object as `int64`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeUInt64(value)\n\nWrites `value` to `Pickle` object as `uint64`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeFloat(value)\n\nWrites `value` to `Pickle` object as `float`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeDouble(value)\n\nWrites `value` to `Pickle` object as `Double`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeString(str)\n\n* `str` String\n\nWrites `str` to `Pickle` object. Returns `true` when succeeded and returns\n`false` when failed.\n\n### PickleIterator.readBool()\n\nReturns current value as `bool` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readInt()\n\nReturns current value as `int` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readUInt32()\n\nReturns current value as `uint32` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readInt64()\n\nReturns current value as `int64` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readUInt64()\n\nReturns current value as `uint64` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readFloat()\n\nReturns current value as `float` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readDouble()\n\nReturns current value as `double` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readString()\n\nReturns current value as `String` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n",
 "readmeFilename": "README.md",
 "users": {
  "faraoman": true
 }
}